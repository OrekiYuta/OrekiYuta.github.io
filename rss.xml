<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Canoe</title>
  
  <subtitle>「ろくでなし」</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="http://www.orekiyuta.cn/"/>
  <updated>2019-11-29T12:55:40.957Z</updated>
  <id>http://www.orekiyuta.cn/</id>
  
  <author>
    <name>Orekiyuta</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ark.exploit.log</title>
    <link href="http://www.orekiyuta.cn/Ark-exploit-log/"/>
    <id>http://www.orekiyuta.cn/Ark-exploit-log/</id>
    <published>2019-10-10T03:47:18.000Z</published>
    <updated>2019-11-29T12:55:40.957Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Date-2019-11-23-18-18-27"><a href="#Date-2019-11-23-18-18-27" class="headerlink" title="Date: 2019-11-23 18:18:27"></a>Date: 2019-11-23 18:18:27</h3><ul><li>Ctrl + Alt + N 内联变量(相当于提取变量的逆向操作)</li></ul><h3 id="Date-2019-11-20-22-01-04"><a href="#Date-2019-11-20-22-01-04" class="headerlink" title="Date: 2019-11-20 22:01:04"></a>Date: 2019-11-20 22:01:04</h3><ul><li><p>Pro Environment Deployment Review</p><ul><li>服务器端用git pull 拉取开发环境提交的最新代码</li><li>修改配置文件信息;👉<a href="https://maven.apache.org/guides/introduction/introduction-to-profiles.html" target="_blank" rel="noopener">Maven官方文档</a><ul><li>环境分离,Maven提供在本地使用Pom配置</li><li>服务端用.m2/setting.xml 配置文件  </li></ul></li><li>配置jdk,maven环境<ul><li>用flyway工具按脚本生成数据库表 <code>mvn clean compile flyway:migrate -Ppro</code> pro是在配置中 profiles节点自定义的名称  </li><li>配置了环境分离的话,可以在开发环境和服务端分别按配置构建数据库连接进行便利开发,因为开发环境的配置不能随意填写</li><li>开发环境最好和服务部署环境保持一致性</li></ul></li><li>用 <code>mvn clean compile</code> <code>mvn package</code> 构建jar包</li><li>运行jar包即可 <code>java -jar target/xxxx-0.0.1 -SNAPSHOT.jar</code></li><li>访问服务端即可</li></ul><hr><ul><li>在服务器部署方面采用docker会更方便后续工作</li><li>docker主要步骤为:   拉取镜像/构建镜像→构建容器→运行容器</li><li>首先得安装docker,运行 <code>service docker start</code></li><li>在这里以MySQL为例:</li><li><code>docker image pull mysql</code> 首先会从本地查看有没有mysql镜像,没有再去docker仓库拉取</li><li><code>docker image ls</code></li><li><code>docker container run mysql</code> 生成的容器会持久化存在，不需要可删除</li><li><code>docker ps</code> <code>docker container ls -all</code></li><li><code>docker run -it --name mysql -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -v xx/xx : xx/xx mysql</code> 端口映射,文件夹映射</li><li>需要深入了解网络IP</li><li><code>docker exec -it mysql /bin/bash</code> 进入容器启动容器命令行</li><li><code>docker exec -it mysql -h localhost -u root -p</code></li></ul><hr><ul><li>对于项目而言可以采用 dockerFile 方式把环境和项目和操作步骤写入dockerFile文件里</li><li>然后构建项目镜像,就可以方便的在不同环境利用docker部署</li><li>也可以把项目容器和数据库容器等多个容器用docker compose 方式构建</li><li>多下点功夫去看官方英文文档<a id="more"></a><h3 id="Date-2019-11-15-17-06-49"><a href="#Date-2019-11-15-17-06-49" class="headerlink" title="Date: 2019-11-15 17:06:49"></a>Date: 2019-11-15 17:06:49</h3></li></ul></li><li><p>Ctrl + shift + U 选中内容小写</p></li></ul><h3 id="Date-2019-11-08-17-06-50"><a href="#Date-2019-11-08-17-06-50" class="headerlink" title="Date: 2019-11-08 17:06:50"></a>Date: 2019-11-08 17:06:50</h3><ul><li>Ctrl + Alt + M 把选中代码提取成方法</li><li>Ctrl + Alt + P 把选择代码提取成形式参数</li></ul><h3 id="Date-2019-11-02-16-51-41"><a href="#Date-2019-11-02-16-51-41" class="headerlink" title="Date: 2019-11-02 16:51:41"></a>Date: 2019-11-02 16:51:41</h3><ul><li><p>页面debug方法:</p><ol start="0"><li><p>在调试处加入debugger</p><p> <img src="/images/Ark/12.png" alt>    </p></li><li><p>运行页面进行相应调试</p><p> <img src="/images/Ark/13.png" alt>    </p></li></ol></li></ul><h3 id="Date-2019-11-01-16-55-42"><a href="#Date-2019-11-01-16-55-42" class="headerlink" title="Date: 2019-11-01 16:55:42"></a>Date: 2019-11-01 16:55:42</h3><ul><li>Ctrl+F6 调整方法参数位置</li></ul><h3 id="Date-2019-10-28-21-05-57"><a href="#Date-2019-10-28-21-05-57" class="headerlink" title="Date: 2019-10-28 21:05:57"></a>Date: 2019-10-28 21:05:57</h3><ul><li><p>数据库字段默认值设置了default 0 ,但是就是不生效。</p><ol start="0"><li><p>问题逐一排查，先debug了看了下提交的字段为null,按道理更新数据之后该条记录中的null应该为默认值0;但是仍是null。</p></li><li><p>思考……是不是之前应用了的MybatisGenerator的用法不对呢。</p></li><li><p>通过分析源码，发现insert()和insertSelective的区别了,加入是insert就把所有值插入,但是要注意加入数据库字段有default,default是不会起作用的,而后者就不会忽略default</p></li><li><p>同理updateByPrimaryKeys,updateByPrimaryKeySelective</p><p> <img src="/images/Ark/11.png" alt>    </p></li></ol></li></ul><h3 id="Date-2019-10-26-00-15-59"><a href="#Date-2019-10-26-00-15-59" class="headerlink" title="Date: 2019-10-26 00:15:59"></a>Date: 2019-10-26 00:15:59</h3><ul><li>Alt+F7 查看依赖处</li></ul><h3 id="Date-2019-10-25-01-17-27"><a href="#Date-2019-10-25-01-17-27" class="headerlink" title="Date: 2019-10-25 01:17:27"></a>Date: 2019-10-25 01:17:27</h3><ul><li><p>在数据库后期维护时，如果增加字段，要修改Mapper,Model等已有代码，这时就很麻烦; </p><p>MyBatis Generator 可以帮助完成这些操作，配置Maven依赖，配置xml,运行命令 <code>mvn -Dmybatis.generator.overwrite=true mybatis-generator:generate</code></p></li></ul><h3 id="Date-2019-10-21-01-12-13"><a href="#Date-2019-10-21-01-12-13" class="headerlink" title="Date: 2019-10-21 01:12:13"></a>Date: 2019-10-21 01:12:13</h3><ul><li><p>Ctrl+F12 快速展示源码的方法列表</p><p>  <img src="/images/Ark/10.png" alt>    </p></li><li><p>Win+Alt+← 后退   +→ 前进</p></li></ul><h3 id="Date-2019-10-19-17-59-27"><a href="#Date-2019-10-19-17-59-27" class="headerlink" title="Date: 2019-10-19 17:59:27"></a>Date: 2019-10-19 17:59:27</h3><ul><li>Ctrl+Win+W  会自动选中已选中的页面标签最外层</li></ul><h3 id="Date-2019-10-16-12-20-25"><a href="#Date-2019-10-16-12-20-25" class="headerlink" title="Date: 2019-10-16 12:20:25"></a>Date: 2019-10-16 12:20:25</h3><ul><li><p>Lombok 通过注解自动化生成getter和setter，同时也有它的缺点，Google一下，你就知道！</p><p>  <img src="/images/Ark/09.png" alt>    </p></li></ul><h3 id="Date-2019-10-15-19-16-56"><a href="#Date-2019-10-15-19-16-56" class="headerlink" title="Date: 2019-10-15 19:16:56"></a>Date: 2019-10-15 19:16:56</h3><ul><li><p>IEDA快捷生成DIV,输入标签.类名 按Tag键;同理纯标签的话，输入标签名按Tag生成</p><p>  <img src="/images/Ark/05.png" alt></p><p>  <img src="/images/Ark/06.png" alt></p></li><li><p>Ctrl+D 复制光标当前所在行内容到下一行</p></li><li><p>Flyway集成错误： org.flywaydb.core.api.FlywayException: Version may only contain 0..9 and . (dot). Invalid version: 3.Creare.question.table -&gt; [Help 1]</p><p>  <img src="/images/Ark/07.png" alt></p><p>  解决方案：根据错误提示,发现是命名格式错误,修改即可</p><p>  <img src="/images/Ark/08.png" alt></p></li></ul><h3 id="Date-2019-10-13-16-57-00"><a href="#Date-2019-10-13-16-57-00" class="headerlink" title="Date: 2019-10-13 16:57:00"></a>Date: 2019-10-13 16:57:00</h3><ul><li><p>flyway  类似版本管理工具一样，管理数据库</p><p>  <img src="/images/Ark/04.png" alt></p></li><li><p>rm ~/ArCanoe.* 删除已有库</p></li><li><p>H2数据库仅支持单链接，执行相关内容，需要关闭之前的链接</p></li></ul><h3 id="Date-2019-10-11-16-04-50"><a href="#Date-2019-10-11-16-04-50" class="headerlink" title="Date: 2019-10-11 16:04:50"></a>Date: 2019-10-11 16:04:50</h3><ul><li>Crtl+E 切换最近编辑的窗口</li></ul><h3 id="Date-2019-10-10-20-38-00"><a href="#Date-2019-10-10-20-38-00" class="headerlink" title="Date: 2019-10-10 20:38:00"></a>Date: 2019-10-10 20:38:00</h3><ul><li><p>Alt+Enter 提示添加jar包或其它</p></li><li><p>Ctrl+Alt+V 快速创建变量</p><p>  <img src="/images/Ark/02.png" alt></p><p>  <img src="/images/Ark/03.png" alt></p></li><li><p>Shift+Enter 自动换行并将光标移动到下一行前面</p></li></ul><h3 id="Date-2019-10-10-11-13-13"><a href="#Date-2019-10-10-11-13-13" class="headerlink" title="Date: 2019-10-10 11:13:13"></a>Date: 2019-10-10 11:13:13</h3><ul><li><p>IDEA(Shift+F6) 重命名文件</p></li><li><p>Crtl+Shift+F12  代码栏最大化</p></li></ul><h3 id="Date-2019-10-09-20-16-26"><a href="#Date-2019-10-09-20-16-26" class="headerlink" title="Date: 2019-10-09 20:16:26"></a>Date: 2019-10-09 20:16:26</h3><ul><li><p>不知道传什么变量的时候，IDEA(Crtl+P)提示</p><p>  <img src="/images/Ark/01.png" alt></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Date-2019-11-23-18-18-27&quot;&gt;&lt;a href=&quot;#Date-2019-11-23-18-18-27&quot; class=&quot;headerlink&quot; title=&quot;Date: 2019-11-23 18:18:27&quot;&gt;&lt;/a&gt;Date: 2019-11-23 18:18:27&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Ctrl + Alt + N 内联变量(相当于提取变量的逆向操作)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Date-2019-11-20-22-01-04&quot;&gt;&lt;a href=&quot;#Date-2019-11-20-22-01-04&quot; class=&quot;headerlink&quot; title=&quot;Date: 2019-11-20 22:01:04&quot;&gt;&lt;/a&gt;Date: 2019-11-20 22:01:04&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pro Environment Deployment Review&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器端用git pull 拉取开发环境提交的最新代码&lt;/li&gt;
&lt;li&gt;修改配置文件信息;👉&lt;a href=&quot;https://maven.apache.org/guides/introduction/introduction-to-profiles.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Maven官方文档&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;环境分离,Maven提供在本地使用Pom配置&lt;/li&gt;
&lt;li&gt;服务端用.m2/setting.xml 配置文件  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置jdk,maven环境&lt;ul&gt;
&lt;li&gt;用flyway工具按脚本生成数据库表 &lt;code&gt;mvn clean compile flyway:migrate -Ppro&lt;/code&gt; pro是在配置中 profiles节点自定义的名称  &lt;/li&gt;
&lt;li&gt;配置了环境分离的话,可以在开发环境和服务端分别按配置构建数据库连接进行便利开发,因为开发环境的配置不能随意填写&lt;/li&gt;
&lt;li&gt;开发环境最好和服务部署环境保持一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;mvn clean compile&lt;/code&gt; &lt;code&gt;mvn package&lt;/code&gt; 构建jar包&lt;/li&gt;
&lt;li&gt;运行jar包即可 &lt;code&gt;java -jar target/xxxx-0.0.1 -SNAPSHOT.jar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;访问服务端即可&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;在服务器部署方面采用docker会更方便后续工作&lt;/li&gt;
&lt;li&gt;docker主要步骤为:   拉取镜像/构建镜像→构建容器→运行容器&lt;/li&gt;
&lt;li&gt;首先得安装docker,运行 &lt;code&gt;service docker start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在这里以MySQL为例:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image pull mysql&lt;/code&gt; 首先会从本地查看有没有mysql镜像,没有再去docker仓库拉取&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container run mysql&lt;/code&gt; 生成的容器会持久化存在，不需要可删除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker ps&lt;/code&gt; &lt;code&gt;docker container ls -all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -it --name mysql -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -v xx/xx : xx/xx mysql&lt;/code&gt; 端口映射,文件夹映射&lt;/li&gt;
&lt;li&gt;需要深入了解网络IP&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker exec -it mysql /bin/bash&lt;/code&gt; 进入容器启动容器命令行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker exec -it mysql -h localhost -u root -p&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;对于项目而言可以采用 dockerFile 方式把环境和项目和操作步骤写入dockerFile文件里&lt;/li&gt;
&lt;li&gt;然后构建项目镜像,就可以方便的在不同环境利用docker部署&lt;/li&gt;
&lt;li&gt;也可以把项目容器和数据库容器等多个容器用docker compose 方式构建&lt;/li&gt;
&lt;li&gt;多下点功夫去看官方英文文档
    
    </summary>
    
    
    
      <category term="Springboot" scheme="http://www.orekiyuta.cn/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Install+Migrate</title>
    <link href="http://www.orekiyuta.cn/Hexo-Install-Migrate/"/>
    <id>http://www.orekiyuta.cn/Hexo-Install-Migrate/</id>
    <published>2019-09-19T11:20:12.000Z</published>
    <updated>2019-12-03T13:58:03.299Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装Git-Node"><a href="#安装Git-Node" class="headerlink" title="安装Git,Node"></a>安装Git,Node</h3><p><img src="/images/Hexo-IM/01.png" alt></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>先创建一个文件夹，然后cd到这个目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli  //安装</span><br><span class="line">hexo -v   //查看版本</span><br></pre></td></tr></table></figure><p><img src="/images/Hexo-IM/02.png" alt></p><a id="more"></a><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hexo init myblog  //任意文件夹名 myblog</span><br></pre></td></tr></table></figure><p><img src="/images/Hexo-IM/03.png" alt></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>进入myblog文件夹 启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd myblog</span><br><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><img src="/images/Hexo-IM/04.png" alt></p><h3 id="检查页面；迁移设备"><a href="#检查页面；迁移设备" class="headerlink" title="检查页面；迁移设备"></a>检查页面；迁移设备</h3><p>在浏览器输入<code>localhost:4000</code>,即可看到页面</p><ul><li>迁移更新设备的话，做到这一步，把原来的博客文件复制到此替换即可</li></ul><h3 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h3><ul><li><p>创建Github仓库，命名 <code>xxx.github.io</code></p><p>  <img src="/images/Hexo-IM/05.png" alt></p></li><li><p>生成SHH</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>  <img src="/images/Hexo-IM/06.png" alt></p><p>  <img src="/images/Hexo-IM/07.png" alt></p></li><li><p>添加SSH到github</p><p>  将刚才生成的id_rsa.pub的内容复制到key</p><p>  <img src="/images/Hexo-IM/08.png" alt></p><p>  检查是否建立连接成功</p><p>  <img src="/images/Hexo-IM/09.png" alt></p></li></ul><h3 id="Hexo部署到GitHub"><a href="#Hexo部署到GitHub" class="headerlink" title="Hexo部署到GitHub"></a>Hexo部署到GitHub</h3><ul><li><p>修改配置文件 <code>_config.yml</code></p><p>  <img src="/images/Hexo-IM/10.png" alt></p></li><li><p>安装deploy-git 部署命令</p><p>  <code>npm install hexo-deployer-git --save</code></p><p>  常用命令</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean      //清除之前生成的东西</span><br><span class="line">hexo g          //更新      </span><br><span class="line">hexo d          //部署</span><br><span class="line">hexo s --debug  //本地调试</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装Git-Node&quot;&gt;&lt;a href=&quot;#安装Git-Node&quot; class=&quot;headerlink&quot; title=&quot;安装Git,Node&quot;&gt;&lt;/a&gt;安装Git,Node&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/Hexo-IM/01.png&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h3&gt;&lt;p&gt;先创建一个文件夹，然后cd到这个目录下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g hexo-cli  //安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo -v   //查看版本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/images/Hexo-IM/02.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Hexo" scheme="http://www.orekiyuta.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git flow</title>
    <link href="http://www.orekiyuta.cn/Git-flow/"/>
    <id>http://www.orekiyuta.cn/Git-flow/</id>
    <published>2019-06-27T17:29:36.000Z</published>
    <updated>2019-12-03T13:57:39.225Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git工作流"><a href="#Git工作流" class="headerlink" title="Git工作流"></a>Git工作流</h3><p>Git flow : </p><p>for ( =&gt; local-code =&gt; submit to local-repository =&gt; submit to server-repository =&gt; from remote-repository update code =&gt; )</p><p>Detail : </p><p>localfolder -&gt; git Stage -&gt; git local -&gt; git remote</p><p>本地工作文件夹 -&gt; 索引区 -&gt; 本地库 -&gt; 远程库（服务器端）</p><hr><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p><code>git init</code>        //初始化</p><p><code>git config -l</code>  //查看配置信息</p><p><code>git config --global user.name &quot;XXX&quot;</code></p><p><code>git config --global user.email &quot;xxx@zz.com&quot;</code></p><p>//查看帮助信息</p><p><code>git config --help</code></p><p><code>git help config</code></p><p><code>git help commit</code></p><p><code>git help ...</code> </p><hr><a id="more"></a><h3 id="提交本地仓库"><a href="#提交本地仓库" class="headerlink" title="提交本地仓库"></a>提交本地仓库</h3><ol><li><code>mkdir mygit</code> //建立本地工作文件夹</li><li><code>cd mygit</code>    //进入文件夹</li><li><code>git init</code>    //初始化git库</li><li><p><code>nano 文件名</code> //编辑本地文件,比如 <code>nano test.htm</code> </p><p> <img src="/images/Git/01.png" alt></p><p> <img src="/images/Git/02.png" alt></p></li><li><p><code>git status</code> //查看本地文件夹状态</p><p> <img src="/images/Git/03.png" alt></p><p> //当前状态为 <em>红色</em> 提示文件未添加到索引区</p></li><li><p><code>git add 文件名</code>//添加文件到索引区，比如 <code>git add test.htm</code></p><p> <img src="/images/Git/04.png" alt></p><p> //提交成功再次查看状态为绿色,成功添加到索引区</p></li><li><p><code>git commit -m &quot;备注信息&quot;</code> //将索引区内容提交至本地仓库</p><p> <img src="/images/Git/05.png" alt></p></li><li><p><code>git log</code> //查看提交日志</p><p> <img src="/images/Git/06.png" alt> </p></li></ol><hr><h3 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h3><ol><li><p>首先修改下原有文件内容 <code>nano test.htm</code> </p><p> <img src="/images/Git/07.png" alt></p></li><li><p>查看状态</p><p> <img src="/images/Git/08.png" alt></p></li><li><p>添加到索引区</p><p> <img src="/images/Git/09.png" alt></p></li><li><p>提交到本地库</p><p> <img src="/images/Git/10.png" alt></p></li><li><p>查看日志</p><p> <img src="/images/Git/11.png" alt></p></li><li><p>在以后日志必定会越来越多，就可以用以下方法查看</p></li></ol><ul><li><p><code>git log -1</code> //后面的数字代表最近的几条记录</p><p>  <img src="/images/Git/12.png" alt></p></li><li><p><code>git log --oneline</code> //将日志信息缩短为一行显示 ; ID号也缩短为前7位了</p><p>  <img src="/images/Git/13.png" alt></p></li><li><p><code>git log -p</code> //查看更改的详细信息</p><p>  <img src="/images/Git/14.png" alt></p><p>  //和数字组合用法,查看最近一次更改的详细信息</p><p>  <img src="/images/Git/15.png" alt></p><p>  //加上oneline,对比上图可见头部信息缩短了</p><p>  <img src="/images/Git/16.png" alt></p></li><li><p><code>git log --stat</code> //对每次的提交的内容进行统计的信息</p><p>  <img src="/images/Git/17.png" alt></p></li><li><p><code>git log --help</code> //查看其他命令用法</p></li></ul><hr><h3 id="工作状态回退"><a href="#工作状态回退" class="headerlink" title="工作状态回退"></a>工作状态回退</h3><ul><li><p>未添加到索引区</p><ol><li><p>修改文件内容</p><p> <img src="/images/Git/19.png" alt></p></li><li><p>查看状态</p><p> <img src="/images/Git/20.png" alt></p></li><li><p><code>git checkout -- 文件名</code> //突然不想要已修改的部分内容了，状态回退一下</p><p> <img src="/images/Git/21.png" alt></p></li><li><p>查看源文件,刚才修改内容已经被回退</p><p> <img src="/images/Git/22.png" alt></p></li></ol></li><li><p>已添加到索引区</p><ol><li><p>修改内容然后添加到索引区</p><p> <img src="/images/Git/23.png" alt></p><p> <img src="/images/Git/24.png" alt></p></li><li><p><code>git reset HEAD 文件名</code> 将添加内容从索引区回退   </p><p> <img src="/images/Git/25.png" alt></p></li><li><p>接着继续做&lt;未添加到索引区&gt;的步骤即可回退到文件未修改状态  </p></li></ol><ul><li><p><code>git add .</code>  //Git 不同版本的用法区别</p><p>  <img src="/images/Git/18.png" alt>  </p></li></ul></li></ul><hr><h3 id="比较修改内容"><a href="#比较修改内容" class="headerlink" title="比较修改内容"></a>比较修改内容</h3><ol><li><p><code>git diff</code> //比较工作文件夹</p><p> <img src="/images/Git/26.png" alt></p></li><li><p><code>git diff --cached</code> //比较索引区</p><p> <img src="/images/Git/27.png" alt></p></li></ol><hr><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ol><li><p>执行多个操作（修改内容，添加文件）</p><p> <img src="/images/Git/28.png" alt><br> <img src="/images/Git/29.png" alt>    </p></li><li><p>查看状态并添加到索引区</p><p> <img src="/images/Git/30.png" alt></p></li><li><p><code>git mv 旧文件名 新文件名</code>  //修改文件名</p><p> <img src="/images/Git/31.png" alt></p><p> //修改前缀认为添加新文件，修改后缀认为重命名</p><p> <img src="/images/Git/32.png" alt></p><p> //同时修改认为添加新文件</p><p> <img src="/images/Git/33.png" alt></p></li><li><p><code>git rm --cached 文件名</code> //从索引区删除</p><p> <img src="/images/Git/34.png" alt></p></li><li><p>查看下日志</p><p> <img src="/images/Git/35.png" alt></p></li></ol><hr><h3 id="忽略管理"><a href="#忽略管理" class="headerlink" title="忽略管理"></a>忽略管理</h3><p>设置Git忽略的文件，这些文件不参与Git库的提交和管理。（动态文件，比如Node.js的 node_modules 文件夹）</p><ol><li><p>新建两个文件;ingnore.tmp为需要被忽略的文件, .gitignore为配置文件</p><p> <img src="/images/Git/36.png" alt></p></li><li><p>查看状态</p><p> // 目前状态为两个文件都将被Git管理</p><p> <img src="/images/Git/37.png" alt></p></li><li><p>在 .gitignore 中添加 <code>*.tmp</code> 忽略这类文件:即使是在同级目录文件夹内的.tmp 都会被忽略</p><p> <img src="/images/Git/38.png" alt></p></li><li><p>查看状态</p><p> //.tmp 已被忽略 ; </p><p> <img src="/images/Git/39.png" alt></p></li></ol><hr><h3 id="更新最后的提交记录"><a href="#更新最后的提交记录" class="headerlink" title="更新最后的提交记录"></a>更新最后的提交记录</h3><p>在上次提交过一次记录，后来发现内容有误，需要修改下内容但是又不想再提交一条修改记录，而是添加到上次提交的记录中去。</p><ol><li><p>在.gitignore 中再添加一条信息</p><p> <img src="/images/Git/40.png" alt></p></li><li><p>查看状态</p><p> <img src="/images/Git/41.png" alt></p></li><li><p>添加到索引区</p><p> <img src="/images/Git/42.png" alt></p></li><li><p><code>git commit --amend</code> //提交到最后的一条记录中去</p><p> <img src="/images/Git/43.png" alt></p></li></ol><hr><h3 id="版本回退-切换"><a href="#版本回退-切换" class="headerlink" title="版本回退/切换"></a>版本回退/切换</h3><p><code>git reset --hard HEAD</code> //回退到最新提交版本</p><p><code>git reset --hard HEAD~</code> //回退到最新提交的上一次版本</p><p><code>git reset --hard HEAD~n</code> //回退到倒数第N版本</p><p><code>git reset --hard 版本ID号</code> //回退到指定版本号</p><ol><li><p>先提交几次记录</p><p> <img src="/images/Git/44.png" alt></p><p> <img src="/images/Git/45.png" alt></p></li><li><p>回退到上个版本</p><p> <img src="/images/Git/46.png" alt></p></li><li><p>回退到最新版本，指的是此刻版本头HEAD指向的版本</p><p> <img src="/images/Git/47.png" alt></p></li><li><p>根据版本ID号回到指定版本 ; 通过头指针指向我们需要的版本,其他在头部之上的版本只是未显示而已,但仍在库中。</p><p> <img src="/images/Git/48.png" alt></p></li><li><p><code>git reflog</code> //要是忘记的版本号,可执行该命令查询之前版本切换的操作信息，从而确定需要切换的版本号</p><p> <img src="/images/Git/49.png" alt></p></li></ol><hr><h3 id="分支使用⭐"><a href="#分支使用⭐" class="headerlink" title="分支使用⭐"></a>分支使用⭐</h3><p>&emsp;&emsp;以上的操作都是在主分支上执行的,但是在实际应用中不应该多次在主分支操作。</p><p>&emsp;&emsp;在项目中每个人都有自己的要执行的任务,每个人执行的任务都不同,那么就需要在主分支上建立自己的分支,在自己的分支上不断的完善后再向主分支进行合并。</p><p><img src="/images/Git/gitbranch.png" alt></p><p><code>git branch 分支名</code>  //建立新分支</p><p><code>git checkout 分支名</code>  //切换分支</p><ol><li><p>查看下当前已有分支情况</p><p> <img src="/images/Git/50.png" alt></p></li><li><p>建立分支，切换分支</p><p> //建立的分支拥有的内容 与 在建立分支的那个时刻的主分支(被分支的分支)的内容一致</p><p> <img src="/images/Git/51.png" alt></p></li><li><p>添加文件，提交记录</p><p> <img src="/images/Git/52.png" alt></p></li><li><p>查看当前分支日志</p><p> <img src="/images/Git/53.png" alt></p></li><li><p>切换到主分支,查看日志</p><p> <img src="/images/Git/54.png" alt></p></li></ol><ul><li><p>在分支修改后没有提交的情况下，是不允许切换分支的</p><p>  <img src="/images/Git/55.png" alt></p></li><li><p>通过git在本地创建仓库，切换分支时另外一个分支的内容在哪里?</p><p>  &emsp;&emsp;项目文件都保存在.git目录下，始终存在，包括历史的各种版本，只不过不能从文件名字搜索到，因为Git是Content Addresing的。每次切换到一个分支，或者是check out一个历史版本，Git就从数据库（就是.git目录）中把这个版本的文件和目录都找出来，Copy一份放这当前的项目目录下。</p></li></ul><hr><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ol><li><p><code>git merge 分支名</code> //先得切换到主分支，再进行合并</p><p> <img src="/images/Git/56.png" alt></p></li><li><p><code>git branch -d 分支名</code> // 删除分支</p><p> <img src="/images/Git/57.png" alt></p></li></ol><hr><h3 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a>分支冲突</h3><ol><li><p><code>git checkout -b 分支名</code> //建立分支并切换到该分支</p><p> <img src="/images/Git/58.png" alt></p></li><li><p>修改文件内容，提交</p><p> <img src="/images/Git/59.png" alt></p><p> <img src="/images/Git/60.png" alt></p></li><li><p>切换分支，继续修改同样文件的内容，提交</p><p> <img src="/images/Git/61.png" alt></p><p> <img src="/images/Git/62.png" alt></p></li><li><p>在主分支上合并开发分支</p><p> //有冲突，需要手动修改</p><p> <img src="/images/Git/63.png" alt></p><p> //打开有冲突的文件</p><p> <img src="/images/Git/65.png" alt>   </p><p> //这是VSCode的功能（当前所处分支|被合并分支|两者都要|比较）</p><p> <img src="/images/Git/64.png" alt></p></li><li><p>修改完毕后,回到主分支，查看状态并提交</p><p> <img src="/images/Git/66.png" alt></p></li></ol><hr><h3 id="使用Tag标签"><a href="#使用Tag标签" class="headerlink" title="使用Tag标签"></a>使用Tag标签</h3><ul><li><p>版本号: 1.1.4   （NNN.abc.xxx）</p></li><li><p>有些为四位数 1.1.4.2356 最后的数字为编译次数</p><ul><li>NNN:大版本号</li><li>abc:每次做出的小更新时，发布的版本号</li><li>xxx:每次bug修正时发布的版本号</li></ul></li></ul><ol><li><p><code>git tag 版本号</code> //把当前代码状态作为一个版本发布</p><p> <img src="/images/Git/67.png" alt>   </p></li><li><p>修复bug，再次发布新版本</p><p> <img src="/images/Git/68.png" alt></p></li><li><p>新功能追加，再次发布新版本</p><p> <img src="/images/Git/69.png" alt></p></li><li><p>查看版本</p><p> <img src="/images/Git/70.png" alt></p></li></ol><hr><h3 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h3><p>在Git中可以将经常使用的命令以别名缩写的方式简化使用,根据个人习惯或者开发组规范吧。</p><p><code>git config --global alias.别名 原命令名</code></p><p>例如：</p><ul><li><code>git config --global alias.co checkout</code></li><li><code>git config --global alias.br branch</code></li><li><code>git config --global alias.cm commit</code></li><li><code>git config --global alias.st status</code></li><li><code>...</code></li></ul><hr><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><ol><li><p>创建Github仓库</p><p> <img src="/images/Git/71.png" alt></p></li><li><p>克隆仓库到本地</p><p> <img src="/images/Git/72.png" alt></p></li><li><p>进入仓库查看状态</p><p> <img src="/images/Git/73.png" alt></p></li><li><p>向仓库添加内容后，查看状态，提交到本地仓库</p><p> <img src="/images/Git/74.png" alt>   </p></li><li><p>查看当前状态，所处分支</p><p> <img src="/images/Git/75.png" alt></p></li><li><p>查看要推送的URL,然后推送到远端</p><p> <img src="/images/Git/76.png" alt> </p></li><li><p>进入GitHub查看,推送成功！</p><p> <img src="/images/Git/77.png" alt></p></li></ol><ul><li><code>git branch -a</code> //查看全部分支情况</li><li><code>git branch 分支名1 remotes/origin/分支名2</code>  //以远程分支名2为依据建立本地分支名1 （这两个是同一个东西来的） </li><li><code>git remote -v</code> //查看获取和推送的URL</li><li><code>git push origin 分支名</code> //推送到指定分支</li><li><code>git pull</code> //拉取远端变更内容</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Git工作流&quot;&gt;&lt;a href=&quot;#Git工作流&quot; class=&quot;headerlink&quot; title=&quot;Git工作流&quot;&gt;&lt;/a&gt;Git工作流&lt;/h3&gt;&lt;p&gt;Git flow : &lt;/p&gt;
&lt;p&gt;for ( =&amp;gt; local-code =&amp;gt; submit to local-repository =&amp;gt; submit to server-repository =&amp;gt; from remote-repository update code =&amp;gt; )&lt;/p&gt;
&lt;p&gt;Detail : &lt;/p&gt;
&lt;p&gt;localfolder -&amp;gt; git Stage -&amp;gt; git local -&amp;gt; git remote&lt;/p&gt;
&lt;p&gt;本地工作文件夹 -&amp;gt; 索引区 -&amp;gt; 本地库 -&amp;gt; 远程库（服务器端）&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;基础配置&quot;&gt;&lt;a href=&quot;#基础配置&quot; class=&quot;headerlink&quot; title=&quot;基础配置&quot;&gt;&lt;/a&gt;基础配置&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;        //初始化&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config -l&lt;/code&gt;  //查看配置信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --global user.name &amp;quot;XXX&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --global user.email &amp;quot;xxx@zz.com&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;//查看帮助信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --help&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git help config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git help commit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git help ...&lt;/code&gt; &lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
    
      <category term="Git" scheme="http://www.orekiyuta.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>CentOS:SVN Configure</title>
    <link href="http://www.orekiyuta.cn/CentOS-SVNConfigure/"/>
    <id>http://www.orekiyuta.cn/CentOS-SVNConfigure/</id>
    <published>2019-06-11T11:36:49.000Z</published>
    <updated>2019-12-03T13:56:10.077Z</updated>
    
    <content type="html"><![CDATA[<ol><li><code>ssh root@xx.xxx.xxx.xxx</code>   //通过SSH连接服务器</li><li><code>svn</code>                      //先查看是否安装了svn</li><li><code>yum install svn</code>         //安装svn</li><li><code>svn --version</code>          //查看svn版本</li><li>输入<code>svn</code>按Tab补全  ; 会出现很多以svn开头的,可以选择使用</li><li><code>svnadmin create /opt/svn/916213802</code>      //在根目录下创建SVN仓库</li><li><code>svnserve -d -r /opt/svn/916213802/</code>   //启动svn服务</li><li><code>ps -ef | grep svnserve</code>   //查看svnserve 是否启动<a id="more"></a></li><li><code>netstat -an | grep 3690</code>   //3690是svn默认端口,查看是否开放</li><li>由于阿里云安全组不开放该端口,所以要去阿里云服务器开启<em>3690</em> 端口<br><img src="/images/CentOSSVNConfigure/01.png" alt></li><li><code>cd /opt/svn/916213802/conf/</code>  //进入仓库查看配置文件        </li><li><code>vim authz</code>   //设置用户<br><img src="/images/CentOSSVNConfigure/02.png" alt></li><li><code>vim passwd</code>  //设置用户和密码<br><img src="/images/CentOSSVNConfigure/03.png" alt></li><li><code>vim svnserve.conf</code>  //设置其他参数<br><img src="/images/CentOSSVNConfigure/04.png" alt></li><li><code>killall svn</code>   //关闭svn进程也可以在12的基础上<code>killall pid</code></li><li><code>svnserve -d -r /opt/svn/916213802</code>  //再次启动svnserve服务</li><li><code>svn checkout svn://47.107.xxx.xxx/916213802 --username 91621380205 --password 91621380205</code><br>//本地连接服务器SVN ,执行后下载svn上的项目到本地当前目录,可不用–username和–password</li></ol><hr><ul><li><code>pwd</code>   //查看当前目录</li><li><code>cd /</code>  //进入根目录</li><li><code>ls</code> 查看当前目录下文件</li><li><code>ll</code> 查看当前目录下文件</li><li>执行第<em>7</em> 步后,再执行第<em>17</em> 步测试连接,如果连接得上就不用操作步骤<em>8-10</em> ;</li><li>部署项目的话把项目放在本地checkout下来的文件夹里,<em>同步</em> 上去就可以了.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;code&gt;ssh root@xx.xxx.xxx.xxx&lt;/code&gt;   //通过SSH连接服务器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;svn&lt;/code&gt;                      //先查看是否安装了svn&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yum install svn&lt;/code&gt;         //安装svn&lt;/li&gt;
&lt;li&gt;&lt;code&gt;svn --version&lt;/code&gt;          //查看svn版本&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;svn&lt;/code&gt;按Tab补全  ; 会出现很多以svn开头的,可以选择使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;svnadmin create /opt/svn/916213802&lt;/code&gt;      //在根目录下创建SVN仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;svnserve -d -r /opt/svn/916213802/&lt;/code&gt;   //启动svn服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps -ef | grep svnserve&lt;/code&gt;   //查看svnserve 是否启动
    
    </summary>
    
    
    
      <category term="CentOS" scheme="http://www.orekiyuta.cn/tags/CentOS/"/>
    
      <category term="Linux" scheme="http://www.orekiyuta.cn/tags/Linux/"/>
    
      <category term="SVN" scheme="http://www.orekiyuta.cn/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>Java-ArtificialSimulation</title>
    <link href="http://www.orekiyuta.cn/Java-ArtificialSimulation/"/>
    <id>http://www.orekiyuta.cn/Java-ArtificialSimulation/</id>
    <published>2019-06-10T01:50:57.000Z</published>
    <updated>2019-12-03T13:59:28.665Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Create-a-project"><a href="#Create-a-project" class="headerlink" title="Create a project"></a>Create a project</h3><p>Create New Project =&gt; Maven =&gt; Next =&gt; for (Fill in information =&gt; Next) =&gt; Finish<br> <img src="/images/Java-AS/0x011.png" alt><br> <img src="/images/Java-AS/0x012.png" alt><br> <img src="/images/Java-AS/0x013.png" alt><br> <img src="/images/Java-AS/0x014.png" alt></p><h3 id="Environment-and-Tools"><a href="#Environment-and-Tools" class="headerlink" title="Environment and Tools"></a>Environment and Tools</h3><ol><li>Java环境 JDK <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">下载</a></li><li>IDEA  <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">下载</a></li><li>准备好ChromeDriver <a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">下载</a><br>选择好对应版本(我这里选择的是74.0.3729.68 win)</li><li>Selenium 依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;selenium-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.141.59&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h3 id="Get-set"><a href="#Get-set" class="headerlink" title="Get set"></a>Get set</h3><ol><li>在pom.xml中导入Selenium依赖 =&gt; 等待下载</li><li>在src-&gt;main-&gt;java中创建Java类,创建main方法.—-<em>在IDEA中输入psvm+回车_快速创建main方法</em></li><li>把准备好的ChromeDriver.exe放在src-&gt;main-&gt;resources目录中</li></ol><h3 id="Codeing"><a href="#Codeing" class="headerlink" title="Codeing"></a>Codeing</h3><ol><li><p>设置webdriver路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">"webdriver.chrome.driver"</span>,Scan.class.getClassLoader().getResource(<span class="string">"chromedriver.exe"</span>).getPath());</span><br></pre></td></tr></table></figure></li><li><p>创建webdriver对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebDriver webDriver =<span class="keyword">new</span> ChromeDriver();</span><br></pre></td></tr></table></figure></li><li><p>打开页面(这里我以<code>www.lagou.com</code>为操作对象)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webDriver.get(<span class="string">"https://www.lagou.com/zhaopin/Java/?labelWords=label"</span>);</span><br></pre></td></tr></table></figure></li><li><p>审查网页元素<br>在模拟人工操作前,需要先分析页面对象的元素组成,观察到我们需要模拟点击的导航条”工作经验”是在<code>&lt;li class=&quot;muti-chosen&quot;&gt;</code>内的<code>&lt;span&gt;</code>之间,这样就确定了第一层筛选,然后再从<code>&lt;span&gt;</code>中筛选出<code>&lt;a&gt;</code>,根据<code>Text()</code>确定了元素位置.<br><img src="/images/Java-AS/0x044.png" alt></p></li><li><p>选择根据页面结构获取对象(我这里选择了Xpath)</p></li></ol><ul><li><p>首先获取第一层筛选</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webDriver.findElement(By.xpath(<span class="string">"//li[@class='multi-chosen']//span[contains(text(),'工作经验')]"</span>));</span><br></pre></td></tr></table></figure></li><li><p>然后选择上面的代码提取成对象—-<em>IDEA快捷键(ctrl+alt+V)</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebElement chosenElement = webDriver.findElement(By.xpath(<span class="string">"//li[@class='multi-chosen']//span[contains(text(),'工作经验')]"</span>))</span><br></pre></td></tr></table></figure></li><li><p>接着同样的操作,写出第二层筛选和点击事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WebElement chosenElement = webDriver.findElement(By.xpath(<span class="string">"//li[@class='multi-chosen']//span[contains(text(),'工作经验')]"</span>));</span><br><span class="line">WebElement optionElement = chosenElement.findElement(By.xpath(<span class="string">"../a[contains(text(),'应届毕业生')]"</span>));</span><br><span class="line">optionElement.click();</span><br></pre></td></tr></table></figure></li><li><p>再次观察页面,发现各个导航条只有文本描述差异,所以接下来把上面两个文本对象抽成变量(选中”工作经验”和”应届毕业生”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String chosenTitle = <span class="string">"工作经验"</span>;</span><br><span class="line">String optionTitle = <span class="string">"应届毕业生"</span>; <span class="comment">//移动代码位置(先选择该行ctrl+shift+↑or↓)</span></span><br><span class="line"></span><br><span class="line">WebElement chosenElement = webDriver.findElement(By.xpath(<span class="string">"//li[@class='multi-chosen']//span[contains(text(),'"</span> + chosenTitle + <span class="string">"')]"</span>));</span><br><span class="line">WebElement optionElement = chosenElement.findElement(By.xpath(<span class="string">"../a[contains(text(),'"</span> + optionTitle + <span class="string">"')]"</span>));</span><br><span class="line">optionElement.click();</span><br></pre></td></tr></table></figure></li><li><p>然后思考,把上面三行抽成方法,之后只需传递两个参数就可以控制了(选中上面三行代码抽成方法—-<em>IDEA快捷键(ctrl+alt+M)</em>,该操作前需要做第二步的提取变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String chosenTitle = <span class="string">"工作经验"</span>;</span><br><span class="line">String optionTitle = <span class="string">"应届毕业生"</span>;</span><br><span class="line">clickOption(webDriver, chosenTitle, optionTitle);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clickOption</span><span class="params">(WebDriver webDriver, String chosenTitle, String optionTitle)</span> </span>&#123;</span><br><span class="line">WebElement chosenElement = webDriver.findElement(By.xpath(<span class="string">"//li[@class='multi-chosen']//span[contains(text(),'"</span> + chosenTitle + <span class="string">"')]"</span>));</span><br><span class="line">WebElement optionElement = chosenElement.findElement(By.xpath(<span class="string">"../a[contains(text(),'"</span> + optionTitle + <span class="string">"')]"</span>));</span><br><span class="line">optionElement.click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写到这里观察上面变量和方法形参,合并一下优化代码.把文本传回方法参数里.—-<em>IDEA快捷键(ctrl+alt+N)</em> (选中方法里的参数)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clickOption(webDriver, <span class="string">"工作经验"</span>, <span class="string">"应届毕业生"</span>);<span class="comment">//接着分析页面,执行五个操作</span></span><br><span class="line">clickOption(webDriver, <span class="string">"学历要求"</span>, <span class="string">"本科"</span>);</span><br><span class="line">clickOption(webDriver, <span class="string">"融资阶段"</span>, <span class="string">"不限"</span>);</span><br><span class="line">clickOption(webDriver, <span class="string">"公司规模"</span>, <span class="string">"不限"</span>);</span><br><span class="line">clickOption(webDriver, <span class="string">"行业领域"</span>, <span class="string">"移动互联网"</span>);</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>解析单页元素<br><img src="/images/Java-AS/0x046.png" alt></li></ol><ul><li><p>观察页面元素发现主要信息都是在<code>&lt;li class=&quot;con_list_item default_list&quot;&gt;</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webDriver.findElements(By.className(<span class="string">"con_list_item"</span>));</span><br></pre></td></tr></table></figure></li><li><p>这里findElements是因为有多个元素,上面的findElement是只有一个元素,接着依然是抽取变量—-<em>IDEA快捷键(ctrl+alt+V)</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;WebElement&gt; jobElements = webDriver.findElements(By.className(<span class="string">"con_list_item"</span>));</span><br></pre></td></tr></table></figure></li><li><p>页面有多组信息就要用循环了咯,循环遍历对象JobElements;—-<em>在IDEA中输入<code>jobElemnets.for</code>+回车_就会补全语法</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (WebElement jobElement : jobElements) &#123;</span><br><span class="line">    WebElement moneyElement = jobElement.findElement(By.className(<span class="string">"position"</span>)).findElement(By.className(<span class="string">"money"</span>));</span><br><span class="line">    System.out.println(moneyElement.getText());</span><br><span class="line">    String companyName = jobElement.findElement(By.className(<span class="string">"company_name"</span>)).getText();<span class="comment">//在IDEA中输入sout+回车_快速创建打印方法</span></span><br><span class="line">    System.out.println(companyName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优化一下代码_把上面代码抽成方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">extractJobsByPagination(webDriver);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">extractJobsByPagination</span><span class="params">(WebDriver webDriver)</span> </span>&#123;</span><br><span class="line">List&lt;WebElement&gt; jobElements = webDriver.findElements(By.className(<span class="string">"con_list_item"</span>));</span><br><span class="line"><span class="keyword">for</span> (WebElement jobElement : jobElements) &#123;</span><br><span class="line">    WebElement moneyElement = jobElement.findElement(By.className(<span class="string">"position"</span>)).findElement(By.className(<span class="string">"money"</span>));</span><br><span class="line">    String companyName = jobElement.findElement(By.className(<span class="string">"company_name"</span>)).getText();</span><br><span class="line">    System.out.println(companyName + <span class="string">" : "</span> + moneyElement.getText());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写到这里可以尝试运行一下了,观察下输出结果.</p></li></ul><ol start="7"><li>解析分页元素<br><img src="/images/Java-AS/0x071.png" alt><br><img src="/images/Java-AS/0x072.png" alt></li></ol><ul><li>观察下一页按钮可点击和不可点击时的变化<br><img src="/images/Java-AS/0x073.png" alt></li><li>测试下按钮事件</li><li>进行逻辑判断,然后触发点击事件.最后在if里进行递归调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">WebElement nextPageBtn = webDriver.findElement(By.className(<span class="string">"pager_next"</span>));</span><br><span class="line"><span class="keyword">if</span>(!nextPageBtn.getAttribute(<span class="string">"class"</span>).contains(<span class="string">"pager_next_disabled"</span>))&#123;</span><br><span class="line">nextPageBtn.click();</span><br><span class="line">System.out.println(<span class="string">"--------下一页---------"</span>);</span><br><span class="line"><span class="comment">//然后这里让线程睡眠一秒钟,以免跳转响应时间不够,再来个异常处理</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            hread.sleep(<span class="number">1000L</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">        extractJobsByPagination(webDriver);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Running"><a href="#Running" class="headerlink" title="Running"></a>Running</h3><p><img src="/images/Java-AS/0x081.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Create-a-project&quot;&gt;&lt;a href=&quot;#Create-a-project&quot; class=&quot;headerlink&quot; title=&quot;Create a project&quot;&gt;&lt;/a&gt;Create a project&lt;/h3&gt;&lt;p&gt;Create New Project =&amp;gt; Maven =&amp;gt; Next =&amp;gt; for (Fill in information =&amp;gt; Next) =&amp;gt; Finish&lt;br&gt; &lt;img src=&quot;/images/Java-AS/0x011.png&quot; alt&gt;&lt;br&gt; &lt;img src=&quot;/images/Java-AS/0x012.png&quot; alt&gt;&lt;br&gt; &lt;img src=&quot;/images/Java-AS/0x013.png&quot; alt&gt;&lt;br&gt; &lt;img src=&quot;/images/Java-AS/0x014.png&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;Environment-and-Tools&quot;&gt;&lt;a href=&quot;#Environment-and-Tools&quot; class=&quot;headerlink&quot; title=&quot;Environment and Tools&quot;&gt;&lt;/a&gt;Environment and Tools&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Java环境 JDK &lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IDEA  &lt;a href=&quot;https://www.jetbrains.com/idea/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;准备好ChromeDriver &lt;a href=&quot;http://npm.taobao.org/mirrors/chromedriver/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载&lt;/a&gt;&lt;br&gt;选择好对应版本(我这里选择的是74.0.3729.68 win)&lt;/li&gt;
&lt;li&gt;Selenium 依赖&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;artifactId&amp;gt;selenium-server&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;version&amp;gt;3.141.59&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.orekiyuta.cn/tags/Java/"/>
    
      <category term="Maven" scheme="http://www.orekiyuta.cn/tags/Maven/"/>
    
      <category term="Xpath" scheme="http://www.orekiyuta.cn/tags/Xpath/"/>
    
      <category term="Selenium" scheme="http://www.orekiyuta.cn/tags/Selenium/"/>
    
      <category term="ChromeDriver" scheme="http://www.orekiyuta.cn/tags/ChromeDriver/"/>
    
  </entry>
  
  <entry>
    <title>CrackRefrain</title>
    <link href="http://www.orekiyuta.cn/CrackRefrain/"/>
    <id>http://www.orekiyuta.cn/CrackRefrain/</id>
    <published>2019-05-28T03:15:44.000Z</published>
    <updated>2019-12-03T13:56:25.937Z</updated>
    
    <content type="html"><![CDATA[<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>在局域网内先扫描端口</li><li>看开启了哪些服务</li><li>搜索看哪些服务可以利用(window smb ,数据库)</li><li>尝试破解,漏洞不需要</li><li>进入成功.执行命令操作</li></ol><a id="more"></a><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><ol><li>登录 <code>mysql -h#ip地址# -u#用户名# -p#密码#</code></li><li>自己的 <code>mysql -u#root(默认)# -p密码</code></li><li><code>select * from mysql.user;</code> 查询系统用户表</li><li>由于host=’localhost’,所以别人连不进来; 修改host=’%’,就是所有人都可以连进来;<br> <code>update mysql.user set host=&#39;%&#39; where  user=&#39;root&#39;;</code></li><li>修改完毕后 刷新 <code>flsuh privileges;</code></li><li><p>可以重新登录mysql 查看修改后情况</p></li><li><p>查看任务进程 <code>tasklist</code></p></li><li>关闭任务进程 <code>taskkill /f /pid #pid号#</code></li><li><p>启动mysql服务 <code>net start mysql</code> 停止mysql服务 <code>net stop mysql</code></p></li><li><p>进去别人的MySQL 首先看下数据库<code>show databases;</code></p></li><li>选择数据库 use xxx; </li><li>看下表 show tables;</li><li>执行表操作 select * from xxx;</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;在局域网内先扫描端口&lt;/li&gt;
&lt;li&gt;看开启了哪些服务&lt;/li&gt;
&lt;li&gt;搜索看哪些服务可以利用(window smb ,数据库)&lt;/li&gt;
&lt;li&gt;尝试破解,漏洞不需要&lt;/li&gt;
&lt;li&gt;进入成功.执行命令操作&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="Crack" scheme="http://www.orekiyuta.cn/tags/Crack/"/>
    
  </entry>
  
  <entry>
    <title>FieldworkDaily</title>
    <link href="http://www.orekiyuta.cn/FieldworkDaily/"/>
    <id>http://www.orekiyuta.cn/FieldworkDaily/</id>
    <published>2019-05-27T02:35:50.000Z</published>
    <updated>2019-11-29T12:20:29.943Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Days-01-190527-10-35AM"><a href="#Days-01-190527-10-35AM" class="headerlink" title="Days-01-190527;10:35AM"></a>Days-01-190527;10:35AM</h3><p>&emsp;&emsp;今日は初めでのじつしゅうひ、朝07：50そとでる。くろまで1時間半ががりました、30ぶんちこくました。ここにきでがら、いつものよに、なにもかんじない。んんんんんんんんんんんんんんん</p><p>べんきょしよ…</p><h3 id="Days-02-190528-11-39AM"><a href="#Days-02-190528-11-39AM" class="headerlink" title="Days-02-190528;11:39AM"></a>Days-02-190528;11:39AM</h3><p>&emsp;&emsp; きょうのあさ、07：45おきろ。さくやははやくねます、ねでかぜをひいた、あさおきてけりをします。そのあと,いつものよに。バスとてでんしゃ…45ぶんぐらいががりました。さくじつよりずいぶんはやくなりました。けさもまたスキヤンポートためしました、MySQLサーバーをとうろくしました、MySQLサービスつうじてほかのりとのコンピューターをせいぎょしてコンピューターめいれいをじつこうしました。いるいるを勉強しました。</p><p>きょうのごごはEasyUIをよく勉強するつもりです。<br><a id="more"></a></p><h3 id="Days-04-190530-16-08PM"><a href="#Days-04-190530-16-08PM" class="headerlink" title="Days-04-190530;16:08PM"></a>Days-04-190530;16:08PM</h3><p>&emsp;&emsp;きのはいそがしい、いちにちは　.Net Coreのことを勉強しまし。やっとよあけににんむをあえた。今日はJava-Springbootのルートマップを勉強なる、いろいろを、たくさわがりました。いい感じです…<br>これがらも頑張ってべんきょうします。</p><h3 id="Days-05-190531-09-30AM"><a href="#Days-05-190531-09-30AM" class="headerlink" title="Days-05-190531;09:30AM"></a>Days-05-190531;09:30AM</h3><p>&emsp;&emsp;きょうのあさ起きては元気、じゅぎょうははんにちだけです。よかったです。きょうもしっかりべんきょうしなけばなりません。ごごのじゅぎょうをやすむのはうそです…(T.T)。いまは14時22分、先ほどはDeleteそうさをかんりょうしました。あとでUpdateを勉強したらじゅぎょうがおわりますた。つかれました。</p><h3 id="Days-06-190603-09-56AM"><a href="#Days-06-190603-09-56AM" class="headerlink" title="Days-06-190603;09:56AM"></a>Days-06-190603;09:56AM</h3><p>&emsp;&emsp;こんしゅうのじっしゅうはまたはじまりました。すごいひとがおおすぎて、じぶんはなにむわがりません。これがら1時にきぎょうにけんがくにいきます、けんがくしてがっこうにがえります。きょうのじっしゅうはこれでおわります。</p><h3 id="Days-07-190604-09-33AM"><a href="#Days-07-190604-09-33AM" class="headerlink" title="Days-07-190604;09:33AM"></a>Days-07-190604;09:33AM</h3><p>&emsp;&emsp;きのうのごご、がっこうにかえるついでに、スーパーによっておかしをたくさんかいいました。いまこうざをきいています。</p><h3 id="Days-08-190605-15-22PM"><a href="#Days-08-190605-15-22PM" class="headerlink" title="Days-08-190605;15:22PM"></a>Days-08-190605;15:22PM</h3><p>&emsp;&emsp;きのうははれ、きょはあめ。つまらない、つかれる。</p><h3 id="Days-11-190610-20-49PM"><a href="#Days-11-190610-20-49PM" class="headerlink" title="Days-11-190610;20:49PM"></a>Days-11-190610;20:49PM</h3><p>&emsp;&emsp;さくやJavaウェブサイトのはちゅうるいのちいさいプロジェクトをかんせいしました。そしてきょうはブログをかきました。いいかんじ、きょうはSVNについてまたしらべました。わるくない…</p><h3 id="Days-15-190614-12-34PM"><a href="#Days-15-190614-12-34PM" class="headerlink" title="Days-15-190614;12:34PM"></a>Days-15-190614;12:34PM</h3><p>&emsp;&emsp;きょはじっしゅうのさいごのひ、グループプロジェクトがかんせいしました、それにとうべんも通った。このみしゅうがんのあいだに、たしかにおおくのちしきをべんきょうしました。つぎのひもこのようにべんきょうしつづけます。(=^・^=)</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Days-01-190527-10-35AM&quot;&gt;&lt;a href=&quot;#Days-01-190527-10-35AM&quot; class=&quot;headerlink&quot; title=&quot;Days-01-190527;10:35AM&quot;&gt;&lt;/a&gt;Days-01-190527;10:35AM&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;今日は初めでのじつしゅうひ、朝07：50そとでる。くろまで1時間半ががりました、30ぶんちこくました。ここにきでがら、いつものよに、なにもかんじない。んんんんんんんんんんんんんんん&lt;/p&gt;
&lt;p&gt;べんきょしよ…&lt;/p&gt;
&lt;h3 id=&quot;Days-02-190528-11-39AM&quot;&gt;&lt;a href=&quot;#Days-02-190528-11-39AM&quot; class=&quot;headerlink&quot; title=&quot;Days-02-190528;11:39AM&quot;&gt;&lt;/a&gt;Days-02-190528;11:39AM&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp; きょうのあさ、07：45おきろ。さくやははやくねます、ねでかぜをひいた、あさおきてけりをします。そのあと,いつものよに。バスとてでんしゃ…45ぶんぐらいががりました。さくじつよりずいぶんはやくなりました。けさもまたスキヤンポートためしました、MySQLサーバーをとうろくしました、MySQLサービスつうじてほかのりとのコンピューターをせいぎょしてコンピューターめいれいをじつこうしました。いるいるを勉強しました。&lt;/p&gt;
&lt;p&gt;きょうのごごはEasyUIをよく勉強するつもりです。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="jnote" scheme="http://www.orekiyuta.cn/tags/jnote/"/>
    
  </entry>
  
  <entry>
    <title>AzureLaneCrack</title>
    <link href="http://www.orekiyuta.cn/AzureLaneCrack/"/>
    <id>http://www.orekiyuta.cn/AzureLaneCrack/</id>
    <published>2019-05-12T16:40:33.000Z</published>
    <updated>2019-11-29T13:38:07.912Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#资源获取">资源</a> | <a href="#立绘">提取立绘</a> | <a href="#语音">提取语音</a> | <a href="#SD小人">提取SD小人</a></p><hr><h3 id="资源获取"><a href="#资源获取" class="headerlink" title="资源获取"></a>资源获取</h3><p>碧蓝航线的资源主要来源于起始安装包/游戏增量更新<br>(1)官网下载安装包,解压后资源在assets\AssetBundles<br>(2)从模拟器或者手机内获取增量内容, 资源在同样路径   </p><hr><h3 id="立绘"><a href="#立绘" class="headerlink" title="立绘"></a>立绘</h3><p>(1)    解压AssetStudio.x64.0.12.46,运行AssetStudioGUI.exe<br>GitHub地址：<a href="https://github.com/Perfare/AssetStudio" target="_blank" rel="noopener">https://github.com/Perfare/AssetStudio</a><br>点击release,下载最新版本.<br> <img src="/images/AzureLaneCrack/image1.png" alt></p><p>(2)    点击File-Load folder 选择资源名为Painting的文件夹(安装包和增量更新的操作都是一样的),等待载入.<br> <img src="/images/AzureLaneCrack/image2.png" alt></p><p>(3)    点击Asset List 下方Name排列的就是各个加密立绘<br> <img src="/images/AzureLaneCrack/image3.png" alt></p><p>(4)    点击Export-All assets 导出全部资源文件到一个新文件夹里.<br> <img src="/images/AzureLaneCrack/image4.png" alt><br><a id="more"></a><br>(5)    Mesh文件夹里面是立绘的骨骼序列, Texture2D是文件夹里是加密后的立绘.<br> <img src="/images/AzureLaneCrack/image5.png" alt></p><p>(6)    立绘还原,解压AzurLanePaintingExtract.v0.7.2,运行.exe<br> GitHub地址：<a href="https://github.com/Goodjooy/AzurLinePaintingRestore" target="_blank" rel="noopener">https://github.com/Goodjooy/AzurLinePaintingRestore</a><br> <img src="/images/AzureLaneCrack/image6.png" alt>  </p><p>(7)    点击加载文件夹,选择刚才导出的Mesh和Texture2D文件夹,即可看到完整的立绘.<br> <img src="/images/AzureLaneCrack/image7.png" alt></p><p>(8)    点击设置-工具,如果出现空白弹窗,表示没有需要添加的新舰娘名,如果有,双击每个选项可以添加舰娘名,完成后确认.<br> <img src="/images/AzureLaneCrack/image8.png" alt></p><p>(9)    点击导出-导出全部,等待导出.<br> <img src="/images/AzureLaneCrack/image9.png" alt><br> <img src="/images/AzureLaneCrack/image10.png" alt></p><hr><h3 id="语音"><a href="#语音" class="headerlink" title="语音"></a>语音</h3><p>(1)    解压 碧蓝航线语音提取.rar  </p><p>(2)    语音路径为assets\AssetBundles\cue()  </p><p>(3)    新建一个输出语音文件夹(cue-output).<br> <img src="/images/AzureLaneCrack/image11.png" alt>  </p><p>(4)    将cue与cue-output一起拖向BlhxCueDecoder.exe.等待导出.<br> <img src="/images/AzureLaneCrack/image12.png" alt> </p><p>(5)    导出时间较长,导出完毕后对照语音表即可识别对应舰娘语音.<br> <img src="/images/AzureLaneCrack/image13.png" alt> </p><hr><h3 id="SD小人"><a href="#SD小人" class="headerlink" title="SD小人"></a>SD小人</h3><p>(1)    SD小人立绘文件夹为char.打开AssetStudio,导入文件夹.<br> <img src="/images/AzureLaneCrack/image14.png" alt></p><p>(2)    得到如图加密过后的SD小人立绘.<br> <img src="/images/AzureLaneCrack/image15.png" alt></p><p>(3)    同理Export-All asset导出到一个文件夹里.<br> <img src="/images/AzureLaneCrack/image16.png" alt></p><p>(4)    TextAsset文件夹里为SD小人部件序列.<br> <img src="/images/AzureLaneCrack/image17.png" alt></p><p>(5)    批量改名去掉txt,将bat文件拖入TextAsset文件夹,双击运行.<br> <img src="/images/AzureLaneCrack/image18.png" alt><br> <img src="/images/AzureLaneCrack/image19.png" alt></p><p>(6)    将TextAsset文件夹里的内容,复制到Texture2D文件夹里.<br> <img src="/images/AzureLaneCrack/image20.png" alt></p><p>(7)    还原SD小人,需要Java环境和skeletonViewer.jar,运行jar.<br> <img src="/images/AzureLaneCrack/image21.png" alt> </p><p>(8)    点击Open,在Texture2D文件夹里选择.skel文件.<br> <img src="/images/AzureLaneCrack/image22.png" alt></p><p>(9)    得到SD小人立绘,Animation中的则是对应拥有的动作.<br> <img src="/images/AzureLaneCrack/image23.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;#资源获取&quot;&gt;资源&lt;/a&gt; | &lt;a href=&quot;#立绘&quot;&gt;提取立绘&lt;/a&gt; | &lt;a href=&quot;#语音&quot;&gt;提取语音&lt;/a&gt; | &lt;a href=&quot;#SD小人&quot;&gt;提取SD小人&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;资源获取&quot;&gt;&lt;a href=&quot;#资源获取&quot; class=&quot;headerlink&quot; title=&quot;资源获取&quot;&gt;&lt;/a&gt;资源获取&lt;/h3&gt;&lt;p&gt;碧蓝航线的资源主要来源于起始安装包/游戏增量更新&lt;br&gt;(1)官网下载安装包,解压后资源在assets\AssetBundles&lt;br&gt;(2)从模拟器或者手机内获取增量内容, 资源在同样路径   &lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;立绘&quot;&gt;&lt;a href=&quot;#立绘&quot; class=&quot;headerlink&quot; title=&quot;立绘&quot;&gt;&lt;/a&gt;立绘&lt;/h3&gt;&lt;p&gt;(1)    解压AssetStudio.x64.0.12.46,运行AssetStudioGUI.exe&lt;br&gt;GitHub地址：&lt;a href=&quot;https://github.com/Perfare/AssetStudio&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Perfare/AssetStudio&lt;/a&gt;&lt;br&gt;点击release,下载最新版本.&lt;br&gt; &lt;img src=&quot;/images/AzureLaneCrack/image1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;(2)    点击File-Load folder 选择资源名为Painting的文件夹(安装包和增量更新的操作都是一样的),等待载入.&lt;br&gt; &lt;img src=&quot;/images/AzureLaneCrack/image2.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;(3)    点击Asset List 下方Name排列的就是各个加密立绘&lt;br&gt; &lt;img src=&quot;/images/AzureLaneCrack/image3.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;(4)    点击Export-All assets 导出全部资源文件到一个新文件夹里.&lt;br&gt; &lt;img src=&quot;/images/AzureLaneCrack/image4.png&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
    
    
      <category term="AzureLane" scheme="http://www.orekiyuta.cn/tags/AzureLane/"/>
    
  </entry>
  
  <entry>
    <title>インデックス</title>
    <link href="http://www.orekiyuta.cn/jnote/"/>
    <id>http://www.orekiyuta.cn/jnote/</id>
    <published>2019-05-01T14:03:23.000Z</published>
    <updated>2019-11-29T12:19:33.314Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;きょうはれいわがんねんのはじまりで、しがもしよにちである。<br>ずつとまえからブログをがこうとおもつでいましたが、<br>あまりにもなまけでいたので、ながながはちめられませんでした。<br>このいちがけつがん、おおくのネットちしきをしり、<br>さいこにGitHubにでんがいするというがたちになりました。<br>このようなけいしきはわたしのサーバーのしげんをせつやくしました、<br>がんりもべんりでし。<br>このブロクをかくのはじつはおもなどうりょくはやはりしごとをさがすためです、<br>りれきしよにてんじできるがらです。<br>プログラムぎじゅつをがくいがいに、ここでじぶんのしゅみをがきます。<br>じぶんのせいかつのいちぶをここにきるくしで、<br>こんかいはちゅうとはんばではないこをねがいます。<br>わたしはなにもてんじできるものがなくで、<br>せいこうしたけいけんがありません。<br>ものごころがつくから、しっぱいばかりでした。<br>つまり、いまのわたしはしっぱいしゃです。<br><a id="more"></a><br>なんねんごのわたしへ：<br>&emsp;&emsp;にほんごのレベレはまだこのたんぶんのようにちゅうとはんばでしが？<br>&emsp;&emsp;まだこうかいしでいますが？<br>&emsp;&emsp;まだプログラマをしていますか？  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;きょうはれいわがんねんのはじまりで、しがもしよにちである。&lt;br&gt;ずつとまえからブログをがこうとおもつでいましたが、&lt;br&gt;あまりにもなまけでいたので、ながながはちめられませんでした。&lt;br&gt;このいちがけつがん、おおくのネットちしきをしり、&lt;br&gt;さいこにGitHubにでんがいするというがたちになりました。&lt;br&gt;このようなけいしきはわたしのサーバーのしげんをせつやくしました、&lt;br&gt;がんりもべんりでし。&lt;br&gt;このブロクをかくのはじつはおもなどうりょくはやはりしごとをさがすためです、&lt;br&gt;りれきしよにてんじできるがらです。&lt;br&gt;プログラムぎじゅつをがくいがいに、ここでじぶんのしゅみをがきます。&lt;br&gt;じぶんのせいかつのいちぶをここにきるくしで、&lt;br&gt;こんかいはちゅうとはんばではないこをねがいます。&lt;br&gt;わたしはなにもてんじできるものがなくで、&lt;br&gt;せいこうしたけいけんがありません。&lt;br&gt;ものごころがつくから、しっぱいばかりでした。&lt;br&gt;つまり、いまのわたしはしっぱいしゃです。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="jnote" scheme="http://www.orekiyuta.cn/tags/jnote/"/>
    
  </entry>
  
</feed>
