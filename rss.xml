<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Canoe</title>
  
  <subtitle>「ろくでなし」</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="http://www.orekiyuta.cn/"/>
  <updated>2020-06-23T14:33:15.275Z</updated>
  <id>http://www.orekiyuta.cn/</id>
  
  <author>
    <name>Orekiyuta</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL Crash Course / After reading</title>
    <link href="http://www.orekiyuta.cn/archives/MySQLCrashCourse/"/>
    <id>http://www.orekiyuta.cn/archives/MySQLCrashCourse/</id>
    <published>2020-06-11T16:45:25.000Z</published>
    <updated>2020-06-23T14:33:15.275Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Remarks"><a href="#Remarks" class="headerlink" title="Remarks"></a><center>Remarks<center></center></center></h2><ol><li>columnName = cN</li><li>tableName = tN</li></ol><h2 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a><center>检索数据</center></h2><h3 id="use-show"><a href="#use-show" class="headerlink" title="use / show"></a>use / show</h3><ul><li><code>use databaseName;</code></li><li><code>show databases;</code></li><li><code>show tables;</code></li><li><code>show columns from tN;</code></li></ul><h3 id="select-distinct"><a href="#select-distinct" class="headerlink" title="select / distinct"></a>select / distinct</h3><ul><li><code>select cN,cN2 from tN;</code></li><li><code>select * from tN;</code></li><li><code>select distinct cN from tN;</code></li></ul><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><ul><li><code>select cN from tN limit 3;</code>    返回3行</li><li><code>select cN from tN limit 3,4;</code>返回第3行后面的4行（第一个数为开始的位置，第二个为要检索的行数）</li><li><code>limit 3,4</code> 等同于 <code>limit 4 offset 3</code> 都是从第3行后面开始取4行</li></ul><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><ul><li><code>select tNX.cN from databaseName.tNX;</code>   完全限定列名、表名</li><li><code>select cN from tN order by cN;</code>    按照指定列名排序</li><li><code>select cN1,cN2,cN3 from tN order by cN2,cN3;</code>   按指定多个列名的顺序排序（只有在指定的前面的列值相同情况下，再对后面的列值排序）<a id="more"></a></li></ul><h3 id="desc-asc"><a href="#desc-asc" class="headerlink" title="desc / asc"></a>desc / asc</h3><ul><li><code>select cN1,cN2 from tN order by cN2 desc;</code> 降序排列，默认情况是升序 asc</li><li><code>select cN1,cN2 from tN order by cN1 desc ,cN2;</code>   desc只对它前面的列名生效（先按照 cN1 降序，再按照 cN2 默认的升序）</li><li><code>select cN1,cN2 from tN order by cN2 desc limit 1;</code></li></ul><h2 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a><center>过滤数据</center></h2><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><ul><li><code>select cN1,cN2 from tN where cN1 = 2;</code></li><li><code>select cN1,cN2 from tN where cN2 = &#39;value&#39;;</code></li></ul><p><img src="/images/MySQLCrashCourse/01.png" alt> </p><h3 id="between-is-null"><a href="#between-is-null" class="headerlink" title="between / is null"></a>between / is null</h3><ul><li><code>select cN1,cN2 from tN where cN1 between 3 and 10;</code></li><li><code>select cN1,cN2 from tN where cN2 is null;</code>    返回 cN2 为 空值 的行</li></ul><h3 id="and-or-运算符"><a href="#and-or-运算符" class="headerlink" title="and / or / ( ) / 运算符"></a>and / or / ( ) / 运算符</h3><ul><li><code>select cN1,cN2,cN3 from tN where cN1 = 2 and cN3 &lt;= 19;</code></li><li><code>select cN1,cN2,cN3 from tN where cN1 = 2 or cN3 &lt;= 19;</code></li><li><code>select cN1,cN2,cN3 from tN where cN1 = 2 or cN2 = &#39;value&#39; and cN3 &lt;= 19;</code> and的优先级高于or</li><li>这句就理解为 cN2 等于 value 且 cN3 小于（含）19 或者 cN1 = 2   </li><li><u>cN1 = 2 </u>   or  <u>cN2 = ‘value’ and cN3 &lt;= 19</u> </li><li><code>select cN1,cN2,cN3 from tN where (cN1 = 2 or cN2 = &#39;value&#39;) and cN3 &lt;= 19;</code>   用括号提高优先级</li></ul><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><ul><li><code>select cN1,cN2 from tN where cN2 in (&#39;value&#39;,&#39;value2&#39;);</code></li><li><code>select cN1,cN2 from tN where cN1 in (2,4,5);</code></li><li><code>in (4,5)</code>等同于<code>cN1 = 4 or cN1 =5</code></li><li>优点：in 更直观方便，执行快，还可以包括 where 子句</li></ul><h3 id="not"><a href="#not" class="headerlink" title="not"></a>not</h3><ul><li><code>select cN1,cN2 from tN where cN1 not in (2,4,5);</code>     否定后面的条件</li></ul><h3 id="like-通配符"><a href="#like-通配符" class="headerlink" title="like / 通配符"></a>like / 通配符</h3><ul><li><code>select cN1,cN2 from tN where cN2 like &#39;val%&#39;;</code>    % 表示任何字符出现任意次数</li><li><code>select cN1,cN2 from tN where cN2 like &#39;%al%&#39;;</code>    % 无法匹配到 null</li><li><code>select cN1,cN2 from tN where cN2 like &#39;v%e&#39;;</code> </li><li><code>select cN1,cN2 from tN where cN2 like &#39;valu_&#39;;</code>  _ 只匹配一个字符</li><li>通配符处理更花时间，尽量用其他操作符，尽量不要把通配符用在搜索模式的开始处，影响效率</li></ul><h3 id="正则表达式-regexp"><a href="#正则表达式-regexp" class="headerlink" title="正则表达式 regexp"></a>正则表达式 regexp</h3><ul><li><code>select cN1,cN2 from tN where cN2 regexp &#39;value&#39;;</code>  regexp 后面跟的内容作为正则表达式</li><li><code>select cN1,cN2 from tN where cN1 regexp &#39;1&#39;;</code></li></ul><h3 id="like-和-regexp-的区别"><a href="#like-和-regexp-的区别" class="headerlink" title="like 和 regexp 的区别"></a>like 和 regexp 的区别</h3><ul><li><code>like &#39;value&#39;</code> 和 <code>regexp &#39;value&#39;</code> 返回内容一样</li><li><code>like &#39;alue&#39;</code> 和 <code>regexp &#39;alue&#39;</code>  like 没有返回内容， regexp 返回含有 value 值的行</li><li>like 匹配整个列，regexp 还对列值内进行匹配</li><li>这里没有列值为 alue 的行，所以 like 没有返回内容，而 regexp 对列值内匹配，所以有返回内容</li></ul><h3 id><a href="#" class="headerlink" title="|"></a>|</h3><ul><li><code>select cN1,cN2 from tN where cN2 regexp &#39;value1|value2&#39;;</code></li><li><code>select cN1,cN2 from tN where cN2 regexp &#39;value1|2&#39;;</code>  匹配含有 value1 或者 2 的值</li><li><code>select cN1,cN2 from tN where cN1 regexp &#39;1|2|3|4&#39;;</code></li></ul><h3 id="-1"><a href="#-1" class="headerlink" title="[ ] / [^ ]"></a>[ ] / [^ ]</h3><ul><li><code>select cN1,cN2 from tN where cN2 regexp &#39;value[123]&#39;;</code>    匹配特定字符，返回 value1,value2,value3</li><li>[]其实是另一种形式的 or ; [123]是[1|2|3]的缩写</li><li><code>select cN1,cN2 from tN where cN2 regexp &#39;value[^123]&#39;;</code>   否定[123],匹配这些字符以外的任意字符</li></ul><h3 id="0-9-a-z"><a href="#0-9-a-z" class="headerlink" title="[0-9] / [a-z]"></a>[0-9] / [a-z]</h3><ul><li><code>select cN1,cN2 from tN where cN2 regexp &#39;value[1-3]&#39;;</code> </li><li><code>value[1-3]</code>等同于<code>value[123]</code>    [a-z]还可以匹配人以字母</li></ul><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符 \"></a>转义字符 \</h3><ul><li><code>select cN1,cN2 from tN where cN2 regexp &#39;.&#39;;</code> . 匹配任意字符</li><li><code>select cN1,cN2 from tN where cN2 regexp &#39;\\.&#39;;</code> 匹配 .</li><li><code>select cN1,cN2 from tN where cN2 regexp &#39;\\-&#39;;</code> 匹配 -</li><li>\\双反斜杠转义 ，用于匹配特殊字符</li></ul><p><img src="/images/MySQLCrashCourse/02.png" alt> </p><ul><li>多数正则表达式实现使用单个反斜杠转义特殊字符；但是MySQL使用两个反斜杠，MySQL自己解释一个，正则表达式库解释另外一个</li></ul><h3 id="预定义字符集"><a href="#预定义字符集" class="headerlink" title="预定义字符集"></a>预定义字符集</h3><ul><li><code>select cN1,cN2 from tN where cN2 regexp &#39;[:alnum:]&#39;;</code> 使用预定义字符集</li></ul><p><img src="/images/MySQLCrashCourse/03.png" alt> </p><h3 id="重复元字符"><a href="#重复元字符" class="headerlink" title="重复元字符"></a>重复元字符</h3><ul><li><code>select cN1,cN2 from tN where cN2 regexp &#39;valu?&#39;;</code> 匹配多个实例，匹配具体的字符次数</li></ul><p><img src="/images/MySQLCrashCourse/04.png" alt> </p><h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><ul><li><code>select cN1,cN2 from tN where cN2 regexp &#39;^[v123]&#39;;</code>   匹配特定位置的字符</li></ul><p><img src="/images/MySQLCrashCourse/05.png" alt> </p><ul><li>^ 在集合中 [] 表否定该集合，否则表示串的起点</li><li>正如前面所说 like 匹配整个串，regexp 匹配子串</li><li>利用 ^ 和 $ 就可使 regexp 起到 like 的作用</li><li><code>select cN1,cN2 from tN where cN2 rehexp &#39;^value$&#39;;</code>  等同于 <code>select cN1,cN2 from tN where cN2 like &#39;value&#39;;</code> </li></ul><h2 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a><center>计算字段</center></h2><ul><li>直接从数据库中检索出转换、计算或格式化过的数据</li><li>计算字段是运行时在 select 语句内创建的</li></ul><h3 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h3><ul><li>把值联结到一起构成单个值</li><li><code>select Concat(cN1,cN2) from tN;</code> 返回结果为 cN1 和 cN2 的值构成的一个新值 </li><li><code>select Concat(cN1,RTrim(cN2)) from tN;</code>  RTrim()去掉值右边的所有空格</li><li><code>select Concat(cN1,LTrim(cN2)) from tN;</code>  RTrim()去掉值左边的所有空格</li><li><code>select Concat(cN1,Trim(cN2)) from tN;</code>  RTrim()去掉值左右两边的所有空格</li><li><code>select Concat(cN1,cN2) as NewcN from tN;</code> 形成的新值没有名称，需要赋予它一个字段名</li></ul><h3 id="算数计算"><a href="#算数计算" class="headerlink" title="算数计算"></a>算数计算</h3><ul><li><code>select cN1,cN2,cN3,cN1+cN3 as SumcN from tN;;</code> 同样可以用括号来提高优先级</li></ul><p><img src="/images/MySQLCrashCourse/06.png" alt> </p><h2 id="函数处理"><a href="#函数处理" class="headerlink" title="函数处理"></a><center>函数处理</center></h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><ul><li><code>select cN1,Upper(cN2) from tN;</code> 大写转换</li></ul><p><img src="/images/MySQLCrashCourse/07.png" alt> </p><p><img src="/images/MySQLCrashCourse/08.png" alt> </p><p><img src="/images/MySQLCrashCourse/09.png" alt> </p><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p><img src="/images/MySQLCrashCourse/10.png" alt> </p><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p><img src="/images/MySQLCrashCourse/11.png" alt> </p><h3 id="聚集"><a href="#聚集" class="headerlink" title="聚集"></a>聚集</h3><ul><li><code>select cN1,AVG(cN2) from tN;</code> 平均值，AVG()函数忽略列值为 null 的行，同理 count(),max(),min(),sum()也是忽略 null 的行</li></ul><p><img src="/images/MySQLCrashCourse/12.png" alt> </p><ul><li><code>select count(*) from tN;</code>  行数目计数，无论是否 null 都会计数</li><li><code>select count(cN2) from tN;</code> 列值为 null 的行会被忽略 </li><li><code>select cN1,AVG(distinct cN2) from tN;</code> 忽略相同的列值</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> NewcN1,</span><br><span class="line">      <span class="keyword">min</span>(cN3) <span class="keyword">as</span> NewcN2,</span><br><span class="line">      <span class="keyword">max</span>(cN3) <span class="keyword">as</span> NewcN3,</span><br><span class="line">      <span class="keyword">avg</span>(cN3) <span class="keyword">as</span> NewcN4,</span><br><span class="line"><span class="keyword">from</span> tN;</span><br></pre></td></tr></table></figure></li></ul><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a><center>分组</center></h2><h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN1,<span class="keyword">count</span>(*) <span class="keyword">as</span> NewcN </span><br><span class="line"><span class="keyword">from</span> tN </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cN1;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/MySQLCrashCourse/13.png" alt> </p><h3 id="having"><a href="#having" class="headerlink" title="having"></a>having</h3><ul><li>where 过滤指定行并且没有分组的概念</li><li>where 过滤行，having 过滤分组</li><li>having 支持所有 where 操作符</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN1,<span class="keyword">count</span>(*) <span class="keyword">as</span> NewcN </span><br><span class="line"><span class="keyword">from</span> tN </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cN1</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*) &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>也可以理解为 where 在 group by 前过滤，having 在 group by 后过滤</p></li></ul><h3 id="group-by-与-order-by"><a href="#group-by-与-order-by" class="headerlink" title="group by 与 order by"></a>group by 与 order by</h3><p><img src="/images/MySQLCrashCourse/14.png" alt> </p><ul><li>group by 以分组的顺序输出，但是有时候需要以不同于分组默认的顺序输出</li><li>这种情况就需要提供 order by 子句 ，以明确输出的顺序方式</li></ul><h3 id="select-子句顺序"><a href="#select-子句顺序" class="headerlink" title="select 子句顺序"></a>select 子句顺序</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">limit</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/MySQLCrashCourse/15.png" alt> </p><p><img src="/images/MySQLCrashCourse/16.png" alt> </p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a><center>子查询</center></h2><ul><li>子查询总是从内向外处理</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN1,cN2</span><br><span class="line"><span class="keyword">from</span> tN</span><br><span class="line"><span class="keyword">where</span> cN5 <span class="keyword">in</span> (<span class="keyword">select</span> cN5</span><br><span class="line">              <span class="keyword">from</span> tN2</span><br><span class="line">              <span class="keyword">where</span> cN7 <span class="keyword">in</span> (<span class="keyword">select</span> cN7</span><br><span class="line">                            <span class="keyword">from</span> tN3</span><br><span class="line">                            <span class="keyword">where</span> cN9 = <span class="string">'v'</span></span><br><span class="line">                            )</span><br><span class="line">              );</span><br></pre></td></tr></table></figure></li><li><p>作为计算字段使用子查询</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN1,</span><br><span class="line">       cN2,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">count</span>(*)</span><br><span class="line">        <span class="keyword">from</span> tN2</span><br><span class="line">        <span class="keyword">where</span> tN2.cN1 = tN.cN1) <span class="keyword">as</span> NewcN</span><br><span class="line"><span class="keyword">from</span> tN;</span><br></pre></td></tr></table></figure></li></ul><h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a><center>联结表</center></h2><ul><li>关系表：各表通过某些常用值互相关联；在A表中建立了B表中某些字段的列，把两个表联系起来</li><li>外键：某个表中的一列，它包含另外一个表的主键值，定义了两个表之间的关系</li></ul><h3 id="内部联结-inner-join"><a href="#内部联结-inner-join" class="headerlink" title="内部联结 inner join"></a>内部联结 inner join</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN1,tN2</span><br><span class="line"><span class="keyword">where</span> tN1.cN1 = tN2.cN1</span><br></pre></td></tr></table></figure></li><li><p>以上的联结称为 等值联结，基于两个表之间的相等测试，也成为 内部联结</p></li><li>可以用以下更为标准的联结语法</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN1 <span class="keyword">inner</span> <span class="keyword">join</span> tN2</span><br><span class="line"><span class="keyword">on</span> tN1.cN1 = tN2.cN1</span><br></pre></td></tr></table></figure></li><li><p>联结表的数目没有限制，但是这种处理非常消耗资源，联结的表越多，性能下降越厉害</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN2,cN3,cN4</span><br><span class="line"><span class="keyword">from</span> tN1,tN2,tN3,tN4</span><br><span class="line"><span class="keyword">where</span> tN1.cN1 = tN2.cN1</span><br><span class="line">  <span class="keyword">and</span> tN3.cN1 = tN1.cN1</span><br><span class="line">  <span class="keyword">and</span> tN4.cN1 = tN1.cN1</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN1 <span class="keyword">as</span> a,tN2 <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">where</span> a.cN1 = b.cN1</span><br></pre></td></tr></table></figure></li></ul><h3 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN1</span><br><span class="line"><span class="keyword">where</span> cN1 = (<span class="keyword">select</span> cN1</span><br><span class="line">             <span class="keyword">from</span> tN1</span><br><span class="line">             <span class="keyword">where</span> cN2=<span class="string">'x'</span></span><br><span class="line">             );</span><br></pre></td></tr></table></figure></li><li><p>从同一个表从查询内容，上面用了子查询，分了两步进行操作</p></li><li>下面用联结的方式进行相同查询</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN1 <span class="keyword">as</span> a , tN1 <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">where</span> a.cN1 = b.cN1</span><br><span class="line">  <span class="keyword">and</span> b.cN2 = <span class="string">'x'</span>;</span><br></pre></td></tr></table></figure></li><li><p>因为对一个表自己进行联结，相当于每个字段出现了两次，所以要用别名把表的字段给区分开</p></li></ul><h3 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h3><ul><li>无论何时对表进行联结，都会出现至少一个列出现在不止一个表中。</li><li>自然联结可以排除多次出现，使每个列只返回一次</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*,b.cN2,b.cN3</span><br><span class="line"><span class="keyword">from</span> tN1 <span class="keyword">as</span> a , tN2 <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">where</span> a.cN1 = b.cN1;</span><br></pre></td></tr></table></figure></li><li><p>对表 a 使用通配符全部检索列，对表 b 明确指出列</p></li></ul><h3 id="外部联结-left-right-outer-join"><a href="#外部联结-left-right-outer-join" class="headerlink" title="外部联结 left/right outer join"></a>外部联结 left/right outer join</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN1 <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> tN2</span><br><span class="line"><span class="keyword">where</span> tN1.cN1 = tN2.cN1;</span><br></pre></td></tr></table></figure></li><li><p>内部联结是把满足条件的两个表的所有行组合起来，</p></li><li>外部联结主要区别在于（1）把满足条件的两个表的所有行组合起来（2）还要把未满足条件的 左/右 表的行也要附加组合进去</li><li><code>tN1 left outer join tN2;</code> 左外部联结</li><li><code>tN1 right outer join tN2;</code>    右外部联结</li><li><p>左/右 外部联结可以通过颠倒 from 中的表顺序转换，两种类型联结用哪种完全看方便而定</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN2,</span><br><span class="line">       cN3</span><br><span class="line"><span class="keyword">from</span> tN1 <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> tN2</span><br><span class="line"><span class="keyword">where</span> tN1.cN1 = tN2.cN1;</span><br></pre></td></tr></table></figure></li></ul><h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a><center>组合查询</center></h2><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN1,cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN1</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> cN1,cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN2;</span><br></pre></td></tr></table></figure></li><li><p>union 组合的 select 语句出现的字段必须一致，顺序无所谓</p></li><li>union 组合查询出来的结果为各个查询语句按先后查询的顺序组合</li><li>union 的查询结果会自动去重，保留先查询出的行，去除后面查询出的重复的行</li></ul><h3 id="union-all"><a href="#union-all" class="headerlink" title="union all"></a>union all</h3><ul><li>如果想全部保留查询组合结果可使用 union all</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN1,cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN1</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> cN1,cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN2;</span><br></pre></td></tr></table></figure></li><li><p>union 几乎总是完成与多个 where 条件相同的工作</p></li><li>union all 可以完成匹配全部（包括重复行），而 where 就不行</li></ul><h3 id="对组合查询结果排序"><a href="#对组合查询结果排序" class="headerlink" title="对组合查询结果排序"></a>对组合查询结果排序</h3><ul><li>只能用一条 order by 子句，并且必须出现在最后一条 select 语句之后</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN1,cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN1</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> cN1,cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN2</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> cN1;</span><br></pre></td></tr></table></figure></li><li><p>order by 子句放在最后，是对组合查询的整个结果进行排序</p></li></ul><h2 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a><center>全文本搜索</center></h2><h3 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h3><ul><li>一般在创建表的时候启用 全文本搜索</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tN</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">id</span>          <span class="built_in">int</span>       <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  title       <span class="built_in">char</span>(<span class="number">10</span>)  <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  note_text   <span class="built_in">text</span>      <span class="literal">null</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="keyword">id</span>),</span><br><span class="line">  fulltext(note_text)  </span><br><span class="line">)<span class="keyword">engine</span>=MyISAM;</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>Match()指定被搜索的列，Against()指定要使用的搜索表达式</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> tN</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">'value'</span>);</span><br></pre></td></tr></table></figure></li><li><p>查询结果为 note_text 列中带有 value 值的行</p></li><li>全文本搜索不区分大小写</li></ul><hr><ul><li>下面的 like 子句也可查询同样的结果</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> tN</span><br><span class="line"><span class="keyword">where</span> note_text <span class="keyword">like</span> <span class="string">'%value%'</span>;</span><br></pre></td></tr></table></figure></li><li><p>全文本搜索返回的结果行顺序和 like 子句返回的行顺序稍有区别</p></li><li>全文本搜索返回的结果按照 词的出现的次序等级 对每个结果行进行排序（比如：value 出现在第一个词比出现在第三个词的等级高） ；具有较高等级的行先出现，排在前面</li><li>等级由MySQL根据行中词的数目、唯一词的数目、整个索引中词的总数以及包含该词的行的数目计算出来</li><li>like 子句以不是特别有用的顺序返回数据</li></ul><hr><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line">       <span class="keyword">Match</span>(note_text) Against(<span class="string">'value'</span>) <span class="keyword">as</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">from</span> tN；</span><br></pre></td></tr></table></figure></li><li><p>如果在 select 子句中使用 Match() 和 Against(),则会返回一个计算列</p></li><li>计算列的值就是词的等级值，不包含检索值的等级值为 0</li><li>这些值帮助全文本搜索如何排除行（等级为0的行），如何排序结果（按等级降序排列）</li><li>由于数据是索引的，全文本搜索速度还比较快</li></ul><h3 id="查询扩展"><a href="#查询扩展" class="headerlink" title="查询扩展"></a>查询扩展</h3><ul><li><code>with query expansion</code>  用来放宽返回文本的搜索结果的范围</li><li>比如想查询包含 value 和其他包含相关信息的行，即使其它行中不包含 value </li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> tN</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">'value'</span> <span class="keyword">with</span> <span class="keyword">query</span> expansion);</span><br></pre></td></tr></table></figure></li><li><p>查询扩展的执行顺序：</p><ol><li>先执行基本全文本搜索，找出与条件匹配的所有行</li><li>其次，MySQL检查这些匹配行并选择与条件词相关的有用词</li><li>最后，MySQL再次执行全文本搜索，这次不仅使用原来的条件，还附带了相关有用词的条件</li></ol></li><li>利用查询扩展，能够尽可能的查询出相关结果，即使它们不是很精确</li></ul><h3 id="布尔文本搜索"><a href="#布尔文本搜索" class="headerlink" title="布尔文本搜索"></a>布尔文本搜索</h3><ul><li><code>in boolean mode</code></li></ul><p><img src="/images/MySQLCrashCourse/17.png" alt> </p><ul><li>没有指定操作符，搜索结果匹配 value 或 key 中至少一个词的行</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> tN</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">'value key'</span> <span class="keyword">in</span> <span class="built_in">boolean</span> <span class="keyword">mode</span>);</span><br></pre></td></tr></table></figure></li><li><p>搜索结果匹配 value key 短语的行</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> tN</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">'"value key"'</span> <span class="keyword">in</span> <span class="built_in">boolean</span> <span class="keyword">mode</span>);</span><br></pre></td></tr></table></figure></li><li><p>搜索结果匹配包含 value 排除 key 的行</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> tN</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">'"+value -key"'</span> <span class="keyword">in</span> <span class="built_in">boolean</span> <span class="keyword">mode</span>);</span><br></pre></td></tr></table></figure></li><li><p>在布尔方式中，不按等级值降序返回的行</p></li></ul><p><img src="/images/MySQLCrashCourse/18.png" alt> </p><p><img src="/images/MySQLCrashCourse/19.png" alt> </p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a><center>插入数据</center></h2><h3 id="insert-into"><a href="#insert-into" class="headerlink" title="insert into"></a>insert into</h3><ul><li><code>insert into tN values(&#39;key&#39;,&#39;value&#39;,&#39;null&#39;);</code> </li><li>每个列字段必须提供值，没有值可提供 null 值 （假设该列允许为空值）</li><li>上面的写法简单，但并不安全，极度依赖表字段的次序</li><li>应该用以下的标准写法</li><li><code>insert into tN(cN2,cN1，cN3) values(&#39;value&#39;,&#39;key&#39;,&#39;x&#39;);</code> </li><li>这种写法不依赖表字段次序，按照自定的列字段次序填充即可</li></ul><h3 id="insert-low-priority-into"><a href="#insert-low-priority-into" class="headerlink" title="insert low_priority into"></a>insert low_priority into</h3><ul><li>降低 insert 语句优先级，因为 insert 操作可以很耗时，而且它可能降低等待处理的 select 语句的性能</li><li><code>insert low_priority into tN(cN2,cN1，cN3) values(&#39;value&#39;,&#39;key&#39;,&#39;x&#39;);</code> </li><li>同样使用于 update 和 delete 语句</li></ul><h3 id="插入多行"><a href="#插入多行" class="headerlink" title="插入多行"></a>插入多行</h3><ul><li>使用多条 insert 语句，最后一次提交即可</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tN(cN2,cN1，cN3) <span class="keyword">values</span>(<span class="string">'value'</span>,<span class="string">'key'</span>,<span class="string">'x'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tN(cN2,cN1，cN3) <span class="keyword">values</span>(<span class="string">'value1'</span>,<span class="string">'key1'</span>,<span class="string">'x1'</span>);</span><br></pre></td></tr></table></figure></li><li><p>如果插入同一个表，并且结构相同，也可以用以下方式</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tN(cN2,cN1，cN3) </span><br><span class="line"><span class="keyword">values</span>(<span class="string">'value'</span>,<span class="string">'key'</span>,<span class="string">'x'</span>)</span><br><span class="line">      (<span class="string">'value1'</span>,<span class="string">'key1'</span>,<span class="string">'x1'</span>)</span><br><span class="line">      (<span class="string">'value2'</span>,<span class="string">'key2'</span>,<span class="string">'x2'</span>);</span><br></pre></td></tr></table></figure></li><li><p>MySQL用单条 insert 语句处理多个插入 比 使用多条 insert 语句快</p></li></ul><h3 id="插入检索出的数据-insert-select"><a href="#插入检索出的数据-insert-select" class="headerlink" title="插入检索出的数据 insert select"></a>插入检索出的数据 insert select</h3><ul><li>可以从其他表导入数据</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tN(cN2,cN1，cN3) </span><br><span class="line"><span class="keyword">select</span> cN1,cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN2;</span><br></pre></td></tr></table></figure></li><li><p>select 语句的每个列对应插入 insert 语句的每个列中</p></li><li>还可以添加 where 子句等条件</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tN(cN2,cN1，cN3) </span><br><span class="line"><span class="keyword">select</span> cN1,cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN2</span><br><span class="line"><span class="keyword">where</span> cN1 &gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="更新-删除-数据"><a href="#更新-删除-数据" class="headerlink" title="更新/删除 数据"></a><center>更新/删除 数据</center></h2><h3 id="update-set"><a href="#update-set" class="headerlink" title="update set"></a>update set</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tN</span><br><span class="line"><span class="keyword">set</span> cN2 = <span class="string">'value'</span></span><br><span class="line"><span class="keyword">where</span> cN1 = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tN</span><br><span class="line"><span class="keyword">set</span> cN2 = <span class="string">'value'</span>,</span><br><span class="line"><span class="keyword">set</span> cN3 = <span class="string">'key'</span></span><br><span class="line"><span class="keyword">where</span> cN1 = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除列值，可以把它设为 null （假设该列允许为空值）</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tN</span><br><span class="line"><span class="keyword">set</span> cN2 = <span class="string">'null'</span></span><br><span class="line"><span class="keyword">where</span> cN1 = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><ul><li><code>delete from tN where cN1 = 1;</code> 删除行</li><li><code>delete from tN</code> 删除表所有内容/删除表中所有行</li></ul><h2 id="操纵表"><a href="#操纵表" class="headerlink" title="操纵表"></a><center>操纵表</center></h2><h3 id="create-table"><a href="#create-table" class="headerlink" title="create table"></a>create table</h3><ul><li>建立新表，指定的表名必须不存在，否则需要先手工删除已存在同名的表</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tN(</span><br><span class="line">  cN1 <span class="built_in">int</span>       <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  cN2 <span class="built_in">char</span>(<span class="number">10</span>)  <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">  cN3 <span class="built_in">char</span>(<span class="number">19</span>)  <span class="literal">null</span>,</span><br><span class="line">  primary <span class="keyword">key</span> (cN1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>如果仅想在一个表不存在时创建它，可以在表名后给出 <code>if not exists</code></p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tN <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">  cN1 <span class="built_in">int</span>       <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  cN2 <span class="built_in">char</span>(<span class="number">10</span>)  <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">  cN3 <span class="built_in">char</span>(<span class="number">19</span>)  <span class="literal">null</span>,</span><br><span class="line">  cN4 <span class="built_in">int</span>       <span class="literal">null</span> <span class="keyword">default</span> <span class="number">20</span></span><br><span class="line">  primary <span class="keyword">key</span> (cN1)</span><br><span class="line">)<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure></li><li><p>MySQL 语句中忽略空格</p></li></ul><p><img src="/images/MySQLCrashCourse/20.png" alt> </p><ul><li><code>select last_insert_id()</code> 这个函数可以获取最后插入行的自增id值 </li></ul><h3 id="引擎类型"><a href="#引擎类型" class="headerlink" title="引擎类型"></a>引擎类型</h3><ul><li>MySQL 有具体管理和处理数据的内部引擎</li><li>当使用<code>create table</code>时，该引擎具体创建表；当使用<code>select</code>等语句时，处理数据库操作请求</li><li>一般在 <code>ENGINE =</code>中表明使用的引擎类型</li><li>InnoDB是一个可靠的事务处理引擎，它不支持全文本搜索</li><li>MyISAM是一个性能极高的引擎，它支持全文本搜索，但不支持事务处理</li><li>MEMORY在功能上等同于MyISAM,但由于数据存储在内存中，速度很快（特别适合于临时表）</li><li>引擎类型可以混用，在不同的表选用适合的引擎</li><li>外键不能跨引擎</li></ul><h3 id="alter-table"><a href="#alter-table" class="headerlink" title="alter table"></a>alter table</h3><ul><li>增加列</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tN</span><br><span class="line"><span class="keyword">add</span> cN5 <span class="built_in">int</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除列</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tN</span><br><span class="line"><span class="keyword">drop</span> cN5 <span class="built_in">int</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>alter table</code> 常用来定义外键</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tN</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> fk_tN_tN1  </span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span> (cN9) <span class="keyword">references</span> tN1 (cN9)</span><br></pre></td></tr></table></figure></li></ul><h3 id="drop-table"><a href="#drop-table" class="headerlink" title="drop table"></a>drop table</h3><ul><li><code>drop table tN</code> 删除表</li></ul><h3 id="rename-table"><a href="#rename-table" class="headerlink" title="rename table"></a>rename table</h3><ul><li><code>rename table tN to NewtN</code>  重命名表</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> tN1 <span class="keyword">to</span> NewtN1,</span><br><span class="line">             tN2 <span class="keyword">to</span> NewtN2,</span><br><span class="line">             tN3 <span class="keyword">to</span> NewtN3;</span><br></pre></td></tr></table></figure></li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a><center>视图</center></h2><ul><li>视图是虚拟的表，视图只包含使用时动态检索数据的查询</li><li>视图本身不包含数据，它们返回的数据是从其他表中检索出来的</li><li>视图相当于把 select 语句给封装起来，简化数据处理以及重新格式化基础数据或保护基础数据</li></ul><p><img src="/images/MySQLCrashCourse/21.png" alt> </p><ul><li>视图不能被索引，也不能有关联的触发器或默认值</li><li>视图可以和表一起使用</li></ul><h3 id="简化复杂联结"><a href="#简化复杂联结" class="headerlink" title="简化复杂联结"></a>简化复杂联结</h3><ul><li>视图的最常见应用之一是隐藏复杂的SQL</li><li>就是把复杂的查询结果作为视图，然后提供给之后的查询使用，提高便利和复用性</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> viewName <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> cN1,cN2,cN3</span><br><span class="line"><span class="keyword">from</span> tN1,tN2,tN3</span><br><span class="line"><span class="keyword">where</span> tN1.cN1 = tN2.cN1</span><br><span class="line">  <span class="keyword">and</span> tn3.cN1 = tN2.cN1;</span><br></pre></td></tr></table></figure></li><li><p>有了上面的视图创建之后，下面就可以很方便的利用已经创建好的视图，简化SQL</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN1,cN2</span><br><span class="line"><span class="keyword">form</span> viewName</span><br><span class="line"><span class="keyword">where</span> cN1 = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="重新格式化已检索的数据"><a href="#重新格式化已检索的数据" class="headerlink" title="重新格式化已检索的数据"></a>重新格式化已检索的数据</h3><ul><li>视图另一常见的用途是重新格式化检索出的数据</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Concat</span>(<span class="keyword">RTrim</span>(cN1),<span class="string">'('</span>,<span class="keyword">RTrim</span>(cN2),<span class="string">')'</span>) <span class="keyword">as</span> NewcN</span><br><span class="line"><span class="keyword">from</span> tN2</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> cN1;</span><br></pre></td></tr></table></figure></li><li><p>如果经常会用到以上的格式的查询结果时，可以把这个结果创建成视图，就不必每次都执行联结</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> viewName <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">Concat</span>(<span class="keyword">RTrim</span>(cN1),<span class="string">'('</span>,<span class="keyword">RTrim</span>(cN2),<span class="string">')'</span>) <span class="keyword">as</span> NewcN</span><br><span class="line"><span class="keyword">from</span> tN2</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> cN1;</span><br></pre></td></tr></table></figure></li><li><p>然后就可以很方便的利用它了</p></li><li><code>select * from viewName</code> 返回和上面一样的结果</li></ul><h3 id="过滤数据-1"><a href="#过滤数据-1" class="headerlink" title="过滤数据"></a>过滤数据</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> viewName <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> cN1,cN2</span><br><span class="line"><span class="keyword">from</span> tN</span><br><span class="line"><span class="keyword">where</span> cN2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>上面的可以理解为把 <code>select cN1,cN2 from tN</code>创建成视图 viewName</p></li><li>然后在 viewName 视图中使用 where 子句过滤</li><li>视图在处理 where 子句时，会把 where 子句添加到内部语句<code>select cN1,cN2 from tN</code>中，形成<code>select cN1,cN2 from tN where cN2 is not null;</code>进行查询，以便正确的过滤数据</li></ul><h3 id="计算字段-1"><a href="#计算字段-1" class="headerlink" title="计算字段"></a>计算字段</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cN1,cN2,cN3,cN1*cN3 <span class="keyword">as</span> NewcN</span><br><span class="line"><span class="keyword">from</span> tN</span><br><span class="line"><span class="keyword">where</span> cN2 = <span class="string">'value'</span>;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> viewName <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> cN1,cN2,cN3,cN1*cN3 <span class="keyword">as</span> NewcN</span><br><span class="line"><span class="keyword">from</span> tN;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> viewName  </span><br><span class="line"><span class="keyword">where</span> cN2 = <span class="string">'value'</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h3><ul><li>视图没有数据，对视图进行增加或删除行，实际上是对其表的增加或删除行</li><li>通常，视图是可以更新的（insert/update/delete）,但是，并非所有视图都可以更新</li><li>也就是说，如果MySQL不能正确地确定被更新的基数据，则不允许更新</li><li>如果视图定义中有以下操作，则不能进行视图的更新<ol><li>分组 group by /having</li><li>联结</li><li>子查询</li><li>并</li><li>聚集函数</li><li>distinct</li><li>导出（计算）列</li></ol></li><li>换句话说，多数视图都是不可更新的</li><li>一般来说，应该将视图用于检索，而不用于更新</li></ul><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a><center>存储过程</center></h2><ul><li>存储过程简单来说，就是为以后的使用而保存的一条或多条MySQL语句的集合</li><li>为什么要使用存储过程<ol><li>把处理封装在容易使用的单元中，简化复杂操作</li><li>开发人员都一起用一套存储过程，保证了数据的完整性</li><li>简化对变动的管理，只需要修改存储过程的代码即可</li><li>提高性能，使用存储过程比使用单独的SQL语句要快</li><li>存在一些只能使用在单个请求中的MySQL元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码</li></ol></li></ul><h3 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h3><ul><li>MySQL称存储过程的执行为调用，因此执行存储过程的语句为 call</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> productpricing(@pricelow,</span><br><span class="line">                    @pricehigh,</span><br><span class="line">                    @priceaverage);</span><br></pre></td></tr></table></figure></li><li><p>执行名为 productpricing 的存储过程，返回最低、最高、平均价格</p></li><li>存储过程的结果可以显示，也可以不显示</li></ul><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> productpricing()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> avh(prod_price) <span class="keyword">as</span> priceaverage</span><br><span class="line">  <span class="keyword">from</span> products;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>create procedure</code> 创建存储过程</p></li><li><code>create procedure productpricing()</code> 如果存储过程接受参数，可以在（）中列举</li><li>begin 和 end 用来限定存储过程体</li><li>过程体本身就是 SQL 语句</li></ul><p><img src="/images/MySQLCrashCourse/22.png" alt> </p><p><img src="/images/MySQLCrashCourse/23.png" alt> </p><ul><li><code>call productpricing();</code>  执行刚才创建的存储过程并返回结果</li><li>存储过程实际上是一直函数，所以存储过程名后需要有（）</li></ul><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><ul><li><code>drop procedure productpricing</code> 删除存储过程，存储过程名后面不带（）</li><li>如果指定的存储过程不存在，则产生错误提示</li><li><code>drop procedure is exist productpricing</code> 仅当存储过程存在的时候删除，不存在的时候删除也不会产生错误提示</li></ul><h3 id="使用参数"><a href="#使用参数" class="headerlink" title="使用参数"></a>使用参数</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> productpricing(</span><br><span class="line">  <span class="keyword">out</span> pl <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">  <span class="keyword">out</span> ph <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">  <span class="keyword">out</span> pa <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">min</span>(prod_price)</span><br><span class="line">  <span class="keyword">into</span> pl</span><br><span class="line">  <span class="keyword">from</span> products;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">max</span>(prod_price)</span><br><span class="line">  <span class="keyword">into</span> ph</span><br><span class="line">  <span class="keyword">from</span> products;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">avg</span>(prod_price)</span><br><span class="line">  <span class="keyword">into</span> pa</span><br><span class="line">  <span class="keyword">from</span> products;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>pl 最低价，ph 最高价，pa 平均价</p></li><li>out 关键字：从存储过程传出一个值给调用者</li><li>into 关键字：指定保存的变量</li><li>这里的整体意思是，把查询（select）的结果保存（into）到变量（pl/ph/pa）中，然后返回给调用者</li><li>此外、in 关键字：传递给存储过程；inout 关键字：对存储过程的传入和传出</li><li>以下调用该存储过程，传递对应数目的参数</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> productpricing(@pricelow,</span><br><span class="line">                    @pricehigh,</span><br><span class="line">                    @priceaverage);</span><br></pre></td></tr></table></figure></li><li><p>检索返回的值</p></li><li><code>select @pricelow,@pricehigh,@priceaverage;</code></li></ul><hr><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> ordertotal(</span><br><span class="line">  <span class="keyword">in</span> onmuber <span class="built_in">int</span>,</span><br><span class="line">  <span class="keyword">out</span> ototal <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">sum</span>(item_price*quantity)</span><br><span class="line">    <span class="keyword">from</span> orderitems</span><br><span class="line">    <span class="keyword">where</span> order_num = onumber</span><br><span class="line">    <span class="keyword">into</span> ototal;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>call ordertotal(20005,@total);</code></p></li><li><code>select @total;</code></li><li>想得到另外的结果，需要再次调用存储过程</li><li><code>call ordertotal(20009,@total);</code></li><li><code>select @total;</code></li></ul><h3 id="智能存储过程"><a href="#智能存储过程" class="headerlink" title="智能存储过程"></a>智能存储过程</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Name: ordertotal</span></span><br><span class="line"><span class="comment">-- Parameters: onumber = order number</span></span><br><span class="line"><span class="comment">--             taxable = 0 if not taxable, 1 if taxable</span></span><br><span class="line">               ototal = order total variable</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> ordertotal(</span><br><span class="line">  <span class="keyword">in</span> onumber <span class="built_in">int</span> ,</span><br><span class="line">  <span class="keyword">in</span> taxable <span class="built_in">boolean</span> ,</span><br><span class="line">  <span class="keyword">out</span> ototal <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">) <span class="keyword">comment</span> <span class="string">'Obtain order total, optiona11y adding tax'</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">-- Declare variable for total</span></span><br><span class="line">  <span class="comment">-- Declare tax percentage</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">declare</span> total <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">declare</span> taxrate <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">-- Get the order total</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">Sum</span>(item_ price*quantity)</span><br><span class="line">  <span class="keyword">from</span> orderitems</span><br><span class="line">  <span class="keyword">where</span> order_ <span class="keyword">num</span> = onumber</span><br><span class="line">  <span class="keyword">into</span> total;</span><br><span class="line"></span><br><span class="line">  <span class="comment">-- Is this taxable?</span></span><br><span class="line">  <span class="comment">-- Yes, so add taxrate to the total</span></span><br><span class="line"></span><br><span class="line">  if taxable then</span><br><span class="line">     <span class="keyword">select</span> total+(total/<span class="number">100</span>*taxrate) <span class="keyword">into</span> total;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">-- And finally,save to out variable</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">select</span> total <span class="keyword">into</span> ototal;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>注释（–）</p></li><li>declare 定义了局部变量</li><li>if , elseif , else 判断</li></ul><p><img src="/images/MySQLCrashCourse/24.png" alt> </p><ul><li>测试执行以上的存储过程</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> ordertotal(<span class="number">20005</span>,<span class="number">0</span>,@total);</span><br><span class="line"><span class="keyword">select</span> @total;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> ordertotal(<span class="number">20005</span>,<span class="number">1</span>,@total);</span><br><span class="line"><span class="keyword">select</span> @total;</span><br></pre></td></tr></table></figure></li></ul><h3 id="检查存储过程"><a href="#检查存储过程" class="headerlink" title="检查存储过程"></a>检查存储过程</h3><ul><li><code>show create procedure ordertotal;</code></li><li><code>show procedure status;</code></li></ul><p><img src="/images/MySQLCrashCourse/25.png" alt> </p><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a><center>游标</center></h2><ul><li>游标是一个存储在 MySQL 服务器上的数据库查询，他不是一条 select 语句，而是被该语句检索出来的结果集</li><li>游标主要用于交互式应用，其中用户需要滚动屏幕上的数据，并对数据进行浏览或做出更改</li><li>MySQL 游标只能用于存储过程</li></ul><h3 id="使用准则"><a href="#使用准则" class="headerlink" title="使用准则"></a>使用准则</h3><ul><li>在能够使用前，必须声明它</li><li>一旦声明后，必须打开游标以供使用</li><li>对于填有数据的游标，根据需要取出各行</li><li>在结束游标使用时，必须关闭游标</li></ul><h3 id="创建游标"><a href="#创建游标" class="headerlink" title="创建游标"></a>创建游标</h3><ul><li>游标用 declare 语句创建</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> processorders()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> ordernumbers <span class="keyword">cursor</span></span><br><span class="line">    <span class="keyword">for</span></span><br><span class="line">    <span class="keyword">select</span> order_num <span class="keyword">from</span> orders;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>存储过程处理完成后，游标就消失（因为它局限于存储过程）</p></li></ul><h3 id="打开-关闭-游标"><a href="#打开-关闭-游标" class="headerlink" title="打开/关闭 游标"></a>打开/关闭 游标</h3><ul><li><code>open ordernumbers;</code>  打开游标</li><li>处理 open 语句时执行查询，存储检索出的数据以供浏览和滚动</li><li><code>close ordernumbers;</code> 关闭游标</li><li>close 释放游标使用的所有内部内存和资源，因此在每个游标不再需要时都应该关闭</li><li>声明过的游标不需要再次声明，用 open 语句打开它就可以了</li></ul><p><img src="/images/MySQLCrashCourse/26.png" alt></p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> processorders()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> ordernumbers <span class="keyword">cursor</span></span><br><span class="line">    <span class="keyword">for</span></span><br><span class="line">    <span class="keyword">select</span> order_num <span class="keyword">from</span> orders;</span><br><span class="line">    open ordernumbers;</span><br><span class="line">    close ordernumbers;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>打开/关闭 游标的操作需要在存储过程中使用，相当于把检索出的数据用游标定位再做一次检索</p></li><li>主要操作还是通过 call 存储过程来体现</li></ul><h3 id="使用游标数据"><a href="#使用游标数据" class="headerlink" title="使用游标数据"></a>使用游标数据</h3><ul><li>fetch 关键字：指定检索什么数据（所需的列），检索出来的数据存储在什么地方；他还向前移动游标中的内部行指针，使下一条 fetch 语句检索下一行（不重复读取同一行）</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> processorders()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> o <span class="built_in">int</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">declare</span> ordernumbers <span class="keyword">cursor</span></span><br><span class="line">  <span class="keyword">for</span></span><br><span class="line">  <span class="keyword">select</span> order_num <span class="keyword">from</span> orders;</span><br><span class="line"></span><br><span class="line">  open ordernumbers;</span><br><span class="line">  fetch ordernumbers into o;</span><br><span class="line">  close ordernumbers;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>fetch 检索了当前行 order_num 列（自动从第一行开始）到一个名为 o 的局部变量中</p></li></ul><hr><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> processorders()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> done <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">declare</span> o <span class="built_in">int</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">declare</span> ordernumbers <span class="keyword">cursor</span></span><br><span class="line">  <span class="keyword">for</span></span><br><span class="line">  <span class="keyword">select</span> order_num <span class="keyword">from</span> orders;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">declare</span> continue <span class="keyword">handler</span> <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">'02000'</span> <span class="keyword">set</span> done=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  open ordernumbers;</span><br><span class="line">  repeat</span><br><span class="line">    fetch ordernumbers into o;</span><br><span class="line">  until done <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">  close ordernumbers;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>repeat</code> 和 <code>until done end repeat;</code>之间为循环体，执行到 done 为真</p></li><li><code>declare continue handler for sqlstate &#39;02000&#39; set done=1;</code> continu handler 指出当 sqlstate ‘02000’ 出现时，设置 done 为 1 </li><li>sqlstate ‘02000’是一个未找到条件，当REPEAT由于没有更多的行供循环而不能继续时，出现这个条件</li></ul><p><img src="/images/MySQLCrashCourse/27.png" alt> </p><h3 id="完整实例"><a href="#完整实例" class="headerlink" title="完整实例"></a>完整实例</h3><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> ordertotal(</span><br><span class="line">  <span class="keyword">in</span> onumber <span class="built_in">int</span> ,</span><br><span class="line">  <span class="keyword">in</span> taxable <span class="built_in">boolean</span> ,</span><br><span class="line">  <span class="keyword">out</span> ototal <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">) <span class="keyword">comment</span> <span class="string">'Obtain order total, optiona11y adding tax'</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> total <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">declare</span> taxrate <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">Sum</span>(item_ price*quantity)</span><br><span class="line">  <span class="keyword">from</span> orderitems</span><br><span class="line">  <span class="keyword">where</span> order_ <span class="keyword">num</span> = onumber</span><br><span class="line">  <span class="keyword">into</span> total;</span><br><span class="line"></span><br><span class="line">  if taxable then</span><br><span class="line">     <span class="keyword">select</span> total+(total/<span class="number">100</span>*taxrate) <span class="keyword">into</span> total;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">select</span> total <span class="keyword">into</span> ototal;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> processorders()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> done <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">declare</span> o <span class="built_in">int</span>;</span><br><span class="line">  <span class="keyword">declare</span> t <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">declare</span> ordernumbers <span class="keyword">cursor</span></span><br><span class="line">  <span class="keyword">for</span></span><br><span class="line">  <span class="keyword">select</span> order_num <span class="keyword">from</span> orders;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">declare</span> continue <span class="keyword">handler</span> <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">'02000'</span> <span class="keyword">set</span> done=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> ordertotals(order_num <span class="built_in">int</span>,total <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">  open ordernumbers;</span><br><span class="line">  repeat</span><br><span class="line">    fetch ordernumbers into o;</span><br><span class="line">    <span class="keyword">call</span> ordertotal(o,<span class="number">1</span>,t);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> ordertotals(order_num,total)</span><br><span class="line">    <span class="keyword">values</span>(o,t);</span><br><span class="line">  until done <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">  close ordernumbers;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a><center>触发器</center></h2><ul><li>触发器：在事件发生的时候自动执行；在某个表发生更改时自动处理</li><li>触发器响应的语句：（1）delete（2）insert（3）update</li></ul><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><ul><li>创建触发器的准则<ol><li>唯一的触发器名 </li><li>触发器关联的表</li><li>触发器应该响应的活动（delete/insert/update）</li><li>触发器何时执行（处理之前还是之后）</li></ol></li><li><code>create trigger</code> 创建触发器</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> newproduct <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> products</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="keyword">select</span> <span class="string">'product added'</span></span><br></pre></td></tr></table></figure></li><li><p>创建名为 newproduct 的触发器</p></li><li>after insert 在 insert 语句执行后执行</li><li>on products 对于这个表进行响应</li><li>for each row 代码对每个插入行执行</li><li>‘product added’ 对每个插入的行显示一次</li><li>整个流程为：对 products 表每使用 insert 语句添加一行或多行，会看到对每个成功的插入，都会显示 product added 消息</li></ul><p><img src="/images/MySQLCrashCourse/28.png" alt> </p><ul><li>触发器安每个表每个事件每次地定义</li><li>每个表每个事件每次只允许一个触发器</li><li>因此，每个表最多支持6个触发器（每条insert、update、delete的之前和之后）</li><li>单一触发器不能与多个事件或多个表关联</li></ul><p><img src="/images/MySQLCrashCourse/29.png" alt> </p><h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><ul><li><code>drop trigger newproduct</code> 删除触发器</li><li>触发器不能更新或覆盖；修改一个触发器，必须先删除它，然后再重新创建</li></ul><h3 id="使用触发器"><a href="#使用触发器" class="headerlink" title="使用触发器"></a>使用触发器</h3><h4 id="insert-触发器"><a href="#insert-触发器" class="headerlink" title="insert 触发器"></a>insert 触发器</h4><ol><li>在 insert 触发器代码内，可以引用一个名为 new 的虚拟表，访问被插入的行</li><li>在 before insert 触发器中，new 中的值也可以被更新（允许更改被插入的值）</li><li>对于 auto_increment 列，new 在 insert 执行之前包含0，在 insert 执行之后包含新的自动生成值</li></ol><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> neworder <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> orders</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="keyword">select</span> new.order_num;</span><br></pre></td></tr></table></figure></li><li><p>order_num 是 orders 中的自增字段</p></li><li>每次执行插入操作时，都会引用名为 new 的虚拟表，然后把 orders 中获得的 order_num 值填充到新的虚拟表中</li><li>order_num 是 orders 中的自增字段 ，因此该触发器必须 after insert , 因为 before insert 的话，order_num 还没生成</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders(order_date,cust_id)</span><br><span class="line"><span class="keyword">values</span>(<span class="keyword">now</span>(),<span class="number">10001</span>);</span><br></pre></td></tr></table></figure></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|order_num|</span><br><span class="line">|—————————|              </span><br><span class="line">|  20001  |</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/MySQLCrashCourse/30.png" alt></p><h4 id="delete-触发器"><a href="#delete-触发器" class="headerlink" title="delete 触发器"></a>delete 触发器</h4><ol><li>在 delete 触发器代码内，可以引用一个名为 old 的虚拟表，访问被删除的行</li><li>old 中的值全都是只读的，不能更新</li></ol><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> deleteorder <span class="keyword">before</span> <span class="keyword">delete</span> <span class="keyword">on</span> orders</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> archive_orders(order_num,order_date,cust_id)</span><br><span class="line">  <span class="keyword">values</span>(old.order_num,old.order_date,old.cust_id)</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/MySQLCrashCourse/31.png" alt></p><h4 id="update-触发器"><a href="#update-触发器" class="headerlink" title="update 触发器"></a>update 触发器</h4><ul><li>在 update 触发器代码中，可以引用一个名为 old 的虚拟表访问以前（update语句前）的值，引用一个名为 new 的虚拟表访问新更新的值</li><li>在 before update 触发器中，new 中的值可能也被更新（允许更改将要用于 update 语句中的值）</li><li>old 中的值全都是只读的，不能更新</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> updatevendor <span class="keyword">before</span> <span class="keyword">update</span> <span class="keyword">on</span> vendors</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="keyword">set</span> new.vend_state = <span class="keyword">upper</span>(new.vend_state);</span><br></pre></td></tr></table></figure></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a><center>事务</center></h2><h3 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h3><ul><li>并非所有引擎都支持事务处理</li><li>MyISAM 和 InnoDB 是两种最常用的引擎，前者不支持明确的事务处理管理，而后者支持</li><li>事务处理：可以用来维护数据库的完整性，保证成批的 MySQL 操作要么完全执行，要么完全不执行</li></ul><ol><li>事务（transaction）指一组SQL语句</li><li>回退（rollback）指撤销指定SQL语句的过程</li><li>提交（commit）指将未存储的SQL语句结果写入数据库表</li><li>保留点（savepoint）指事务处理中设置的临时占位符（place- holder），可以对它发布回退（与回退整个事务处理不同）</li></ol><h3 id="控制事务处理"><a href="#控制事务处理" class="headerlink" title="控制事务处理"></a>控制事务处理</h3><ul><li>管理事务处理的关键在于将SQL语句组分解为逻辑块，并明确规定数据何时应该回退，何时不应该回退</li><li><code>start transaction</code> 标识事务的开始</li></ul><h4 id="回退-rollback"><a href="#回退-rollback" class="headerlink" title="回退 rollback"></a>回退 rollback</h4><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ordertotals;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> ordertotals;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ordertotals;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ordertotals;</span><br></pre></td></tr></table></figure></li><li><p>rollback 语句回退 start transaction 之后的所有语句</p></li><li>整个流程为：（1）查看表内容不为空（2）标识事务开始（3）删除表内容（4）查看表内容为空（5）回退（6）查看表内容不为空</li><li>rollback 只能在一个事务处理内使用（在执行一条 start transaction 命令之后）</li></ul><p><img src="/images/MySQLCrashCourse/32.png" alt></p><h4 id="提交-commit"><a href="#提交-commit" class="headerlink" title="提交 commit"></a>提交 commit</h4><ul><li>一般的 MySQL 语句都是直接针对数据库表执行和编写的；这就是所谓的隐含提交（implicit commit），即提交（写或保存）操作是自动进行的</li><li>但是，在事务处理块中，提交不会隐含地提交</li><li>为进行明确的提交，使用 commit 语句</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> orderitems <span class="keyword">where</span> order_num = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> orders <span class="keyword">where</span> order_num =<span class="number">20010</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/MySQLCrashCourse/33.png" alt></p><h4 id="保留点-savepoint"><a href="#保留点-savepoint" class="headerlink" title="保留点 savepoint"></a>保留点 savepoint</h4><ul><li>复杂一点的事务处理可能需要部分提交或回退</li><li>这个时候就需要在事务处理中合适的位置放置占位符，如果需要回退，就可以回退到占位符的位置，这些占位符就称为 保留点</li><li><code>savepoint delete1;</code> 创建保留点</li><li><code>rollback to delete1;</code> 回退到保留点</li></ul><p><img src="/images/MySQLCrashCourse/34.png" alt></p><p><img src="/images/MySQLCrashCourse/35.png" alt></p><h4 id="更改默认的提交行为"><a href="#更改默认的提交行为" class="headerlink" title="更改默认的提交行为"></a>更改默认的提交行为</h4><ul><li>默认的 MySQL 行为是自动提交所有更改；换句话说，任何时候你执行一条 MySQL 语句，该语句实际上都是针对表执行的，而且所做的更改立即生效</li><li><code>set autocommit = 0;</code>  为了让 MySQL 不自动提交更改 ，设置 autocommit 为0（假）</li></ul><p><img src="/images/MySQLCrashCourse/36.png" alt></p><h2 id="全球化和本地化"><a href="#全球化和本地化" class="headerlink" title="全球化和本地化"></a><center>全球化和本地化</center></h2><ul><li>数据库表用来存储和检索数据</li><li>不同的语言和字符集需要以不同的方式存储和检索</li><li>字符集：字母和符号的集合</li><li>编码：某个字符集成员的内部表示</li><li>校对：规定字符如何比较的指令</li></ul><p><img src="/images/MySQLCrashCourse/37.png" alt></p><ul><li><code>show character set;</code> 显示所有可用的字符集以及每个字符集的描述和默认校对</li><li><code>show collation;</code> 显示所有可用的校对，以及它们适用的字符集；有的字符集具有不止一次的校对</li></ul><hr><ul><li><code>show variables like &#39;character%&#39;;</code> 指定默认的字符集和校对</li><li><code>show variables like &#39;collation%&#39;;</code> </li><li>给表指定字符集和校对顺序</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable</span><br><span class="line">(</span><br><span class="line">  columnn1 <span class="built_in">int</span>,</span><br><span class="line">  columnn2 <span class="built_in">varchar</span>(<span class="number">10</span>)</span><br><span class="line">) <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> hebrew</span><br><span class="line">  <span class="keyword">collate</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure></li><li><p>给列指定字符集和校对顺序</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable</span><br><span class="line">(</span><br><span class="line">  columnn1 <span class="built_in">int</span>,</span><br><span class="line">  columnn2 <span class="built_in">varchar</span>(<span class="number">10</span>)</span><br><span class="line">  columnn3 <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="built_in">character</span> <span class="keyword">set</span> latinl <span class="keyword">collate</span> latin1_general_ci  </span><br><span class="line">) <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> hebrew</span><br><span class="line">  <span class="keyword">collate</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure></li><li><p>指定备用的顺序校对</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> lastname,firstname <span class="keyword">collate</span> latin1_general_cs;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/MySQLCrashCourse/38.png" alt></p><ol><li>如果指定 character set 和 collate 两者，则使用这些值</li><li>如果只指定 character set ，则使用此字符集及其默认的校对</li><li>如果既不指定 character set ，也不指定 collate ，则使用数据库默认</li></ol><p><img src="/images/MySQLCrashCourse/39.png" alt></p><ul><li>如果绝对需要，串可以在字符集之间进行转换；使用 cast() 或 convert() 函数</li></ul><h2 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a><center>安全管理</center></h2><ul><li>MySQL 用户账号和信息存在名为 mysql 的数据库中</li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h3><p><img src="/images/MySQLCrashCourse/40.png" alt></p><ul><li><code>create user oreki identified by &#39;p@$$wOrd&#39;</code> 创建用户名和密码</li></ul><p><img src="/images/MySQLCrashCourse/41.png" alt></p><p><img src="/images/MySQLCrashCourse/42.png" alt></p><p><img src="/images/MySQLCrashCourse/43.png" alt></p><ul><li><code>rename user oreki to elias</code>  重命名一个用户账号</li><li><code>drop user elias</code> 删除一个用户账号</li></ul><p><img src="/images/MySQLCrashCourse/44.png" alt></p><ul><li><code>set password for elias = password(&#39;n3wp@$$wOrd&#39;)</code>  修改用户的密码</li><li><code>set password = password(&#39;n3wp@$$wOrd&#39;)</code>  不指定用户名时，更改当前登录用户的密码</li></ul><h3 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h3><ul><li>在创建用户账号后，必须接着分配访问权限</li><li>新创建的用户账号没有访问权限</li><li>它们能登录MySQL，但不能看到数据，不能执行任何数据库操作</li><li><code>show grants for elias</code> 查看用户账号的权限</li><li>grant 语句需要给出的信息： （1）要授予的权限（2）被授予访问权限的数据库或表（3）用户名</li><li><code>grant select on crashcourse.* to elias;</code> 允许用户 elias 在 crashcourse 数据库的所有表上使用 select ; 只授予 select 访问权限，具有 只读 访问权限</li><li>grant 的反操作为 revoke ,撤销特定的权限</li><li><code>revoke select on crashcourse.* from elias</code></li></ul><p><img src="/images/MySQLCrashCourse/45.png" alt></p><p><img src="/images/MySQLCrashCourse/46.png" alt></p><p><img src="/images/MySQLCrashCourse/47.png" alt></p><p><img src="/images/MySQLCrashCourse/48.png" alt></p><p><img src="/images/MySQLCrashCourse/49.png" alt></p><h2 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a><center>数据库维护</center></h2><ul><li><code>analyze table tN</code>  检查表键是否正确</li><li><code>check table tN</code> </li><li><code>flush tables</code>  刷新表</li><li><code>flush logs</code>  刷新日志</li></ul><p><img src="/images/MySQLCrashCourse/50.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Remarks&quot;&gt;&lt;a href=&quot;#Remarks&quot; class=&quot;headerlink&quot; title=&quot;Remarks&quot;&gt;&lt;/a&gt;&lt;center&gt;Remarks&lt;center&gt;&lt;/center&gt;&lt;/center&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;columnName = cN&lt;/li&gt;
&lt;li&gt;tableName = tN&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;检索数据&quot;&gt;&lt;a href=&quot;#检索数据&quot; class=&quot;headerlink&quot; title=&quot;检索数据&quot;&gt;&lt;/a&gt;&lt;center&gt;检索数据&lt;/center&gt;&lt;/h2&gt;&lt;h3 id=&quot;use-show&quot;&gt;&lt;a href=&quot;#use-show&quot; class=&quot;headerlink&quot; title=&quot;use / show&quot;&gt;&lt;/a&gt;use / show&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;use databaseName;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show databases;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show tables;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show columns from tN;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;select-distinct&quot;&gt;&lt;a href=&quot;#select-distinct&quot; class=&quot;headerlink&quot; title=&quot;select / distinct&quot;&gt;&lt;/a&gt;select / distinct&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select cN,cN2 from tN;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select * from tN;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select distinct cN from tN;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;limit&quot;&gt;&lt;a href=&quot;#limit&quot; class=&quot;headerlink&quot; title=&quot;limit&quot;&gt;&lt;/a&gt;limit&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select cN from tN limit 3;&lt;/code&gt;    返回3行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select cN from tN limit 3,4;&lt;/code&gt;返回第3行后面的4行（第一个数为开始的位置，第二个为要检索的行数）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;limit 3,4&lt;/code&gt; 等同于 &lt;code&gt;limit 4 offset 3&lt;/code&gt; 都是从第3行后面开始取4行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;order&quot;&gt;&lt;a href=&quot;#order&quot; class=&quot;headerlink&quot; title=&quot;order&quot;&gt;&lt;/a&gt;order&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select tNX.cN from databaseName.tNX;&lt;/code&gt;   完全限定列名、表名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select cN from tN order by cN;&lt;/code&gt;    按照指定列名排序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select cN1,cN2,cN3 from tN order by cN2,cN3;&lt;/code&gt;   按指定多个列名的顺序排序（只有在指定的前面的列值相同情况下，再对后面的列值排序）
    
    </summary>
    
    
    
      <category term="MySQL" scheme="http://www.orekiyuta.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Head First Java / After reading</title>
    <link href="http://www.orekiyuta.cn/archives/HeadFirstJava/"/>
    <id>http://www.orekiyuta.cn/archives/HeadFirstJava/</id>
    <published>2020-06-06T16:08:00.000Z</published>
    <updated>2020-06-23T14:36:44.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dog-d-new-Dog"><a href="#Dog-d-new-Dog" class="headerlink" title="Dog d =new Dog();"></a><center>Dog d =new Dog();</center></h2><ul><li>在 d 中保存的是存取Dog()对象的方法，存储了指向Dog()对象的地址，存储了引用Dog对象的值。<br>对象并没有放进变量中。</li></ul><p><img src="/images/HeadFirstJava/01.png" alt><br><a id="more"></a></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a><center>继承</center></h2><ul><li><p>is a 单方向判断</p></li><li><p>可以用 子类 is a 父类，来判断是否符合继承关系</p></li><li><p>super.xx(); 调用父类的方法</p></li></ul><p><img src="/images/HeadFirstJava/06.png" alt> </p><ul><li>JVM从最后的子类开始读取方法，层层向上读取</li></ul><h2 id="存取权限"><a href="#存取权限" class="headerlink" title="存取权限"></a><center>存取权限</center></h2><ul><li><p>private &lt; default &lt; protected &lt; public</p></li><li><p>public 的成员会被继承；private 的成员不会被继承</p></li><li><p>继承下来的方法可以被覆盖，但是成员变量无法被覆盖</p></li></ul><h2 id="抽象与接口"><a href="#抽象与接口" class="headerlink" title="抽象与接口"></a><center>抽象与接口</center></h2><ul><li><p>抽象类必须要被继承，抽象方法必须要被覆盖</p></li><li><p>如果声明出抽象方法，那必须将类也标记为抽象</p></li><li><p>有抽象方法的类一定是抽象类</p></li><li><p>抽象方法必须被其中的子类，或最后的子类实现</p></li><li><p>ArrayList 用到的是 Object 类型 ，所以ArrayList通用</p></li><li><p>ArrayList<int> 是限制它的类型，这样 ArrayList只能保存int类型对象</int></p></li><li><p>没有直接继承过其他类的类是隐含的继承对象。所有类都继承于 Object 类</p></li></ul><p><img src="/images/HeadFirstJava/04.png" alt> </p><ul><li>Object 类主要目的：（1）作为多态让方法可以应对多种类型的机制 （2）提供Java在执行期的所有对象都有需要的基础方法</li></ul><p><img src="/images/HeadFirstJava/02.png" alt> </p><ul><li>编译器只管引用的类型，而不管对象的类型；Animal a =new Dog(); 只根据引用类型 Animal 来判断有哪些方法可以调用</li></ul><p><img src="/images/HeadFirstJava/03.png" alt> </p><p><img src="/images/HeadFirstJava/05.png" alt> </p><h2 id="堆栈与对象"><a href="#堆栈与对象" class="headerlink" title="堆栈与对象"></a><center>堆栈与对象</center></h2><ul><li><p>JVM启动，从底层操作系统取得一块内存；在此内存执行Java程序</p></li><li><p>在这内存中有两种区域：（1）对象的生存空间堆 （2）方法调用和变量的生存空间栈</p></li></ul><p><img src="/images/HeadFirstJava/07.png" alt> </p><ul><li>变量在哪个空间要看它属于哪种变量：（1）实例变量（2）局部变量[栈变量]</li></ul><p><img src="/images/HeadFirstJava/08.png" alt> </p><ul><li>调用方法压栈</li></ul><p><img src="/images/HeadFirstJava/09.png" alt> </p><ul><li>局部变量在所属的方法中，所以在栈上；对象始终都是在堆上的</li></ul><p><img src="/images/HeadFirstJava/10.png" alt> </p><ul><li>实例变量在所属的对象里面，所以在堆上</li></ul><p><img src="/images/HeadFirstJava/11.png" alt> </p><ul><li><p>如果实例变量是个对像的引用，则引用和对象也都是在堆上</p></li><li><p>实例变量默认值：0/0.0/false,引用默认值 null</p></li></ul><h2 id="构造函数链"><a href="#构造函数链" class="headerlink" title="构造函数链"></a><center>构造函数链</center></h2><p><img src="/images/HeadFirstJava/12.png" alt> </p><ul><li>创建子类对象时，父类对象的构造函数也会被层层执行</li></ul><p><img src="/images/HeadFirstJava/13.png" alt> </p><ul><li>执行方法，先压栈，压栈完毕后才逐个从栈顶开始执行</li></ul><p><img src="/images/HeadFirstJava/14.png" alt> </p><ul><li>调用父类构造函数的方法 super()</li></ul><p><img src="/images/HeadFirstJava/15.png" alt> </p><ul><li>对 super() 的调用必须是构造函数的第一个语句</li></ul><p><img src="/images/HeadFirstJava/16.png" alt> </p><ul><li>给父类构造函数传参 super(xxx)</li></ul><p><img src="/images/HeadFirstJava/17.png" alt> </p><ul><li>从一个构造函数中调用另外一个构造函数 this()</li></ul><p><img src="/images/HeadFirstJava/18.png" alt> </p><h2 id="对象与垃圾回收器"><a href="#对象与垃圾回收器" class="headerlink" title="对象与垃圾回收器"></a><center>对象与垃圾回收器</center></h2><ul><li>对象的生命周期取决于引用它的变量的生命周期</li></ul><p><img src="/images/HeadFirstJava/19.png" alt> </p><p><img src="/images/HeadFirstJava/20.png" alt> </p><ul><li><p>对象被垃圾收集器回收</p><p>  （1）对象所处的方法执行完毕，方法弹出栈，因此里面的对象引用也消亡，所以对象没了引用，等待回收</p><p>  <img src="/images/HeadFirstJava/21.png" alt> </p><p>  （2）对象引用被赋予新的对象，旧的对象失去了引用，等待回收</p><p>  <img src="/images/HeadFirstJava/22.png" alt> </p><p>  （3）对象引用被赋予null,旧的对象同样失去了引用，等待回收</p></li></ul><p><img src="/images/HeadFirstJava/23.png" alt> </p><h2 id="静态"><a href="#静态" class="headerlink" title="静态"></a><center>静态</center></h2><ul><li><p>静态方法内没有变量，不依靠变量做出行为；可以直接通过类型方法调用</p></li><li><p>非静态方法需要先实例化，再依靠引用变量来调用</p></li></ul><p><img src="/images/HeadFirstJava/24.png" alt> </p><p><img src="/images/HeadFirstJava/25.png" alt> </p><ul><li>静态方法内无法调用非静态变量</li></ul><p><img src="/images/HeadFirstJava/26.png" alt> </p><ul><li>静态方法内无法调用非静态方法</li></ul><p><img src="/images/HeadFirstJava/27.png" alt> </p><ul><li>静态变量只会再第一次载入时进行初始化，并被同一个类的所有实例共享</li></ul><p><img src="/images/HeadFirstJava/28.png" alt> </p><ul><li><p>实例变量：每个实例共享一个</p></li><li><p>静态变量：每个类共享一个</p></li><li><p>静态变量在所属的类的对象创建之前就完成初始化</p></li></ul><p><img src="/images/HeadFirstJava/29.png" alt> </p><ul><li>同时标记静态 static 和 final 的变量是常数，一般命名都是全大写字母</li></ul><p><img src="/images/HeadFirstJava/30.png" alt> </p><ul><li>final 可以用来固定值不变，方法不能被覆盖，类不能被继承</li></ul><p><img src="/images/HeadFirstJava/31.png" alt> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Dog-d-new-Dog&quot;&gt;&lt;a href=&quot;#Dog-d-new-Dog&quot; class=&quot;headerlink&quot; title=&quot;Dog d =new Dog();&quot;&gt;&lt;/a&gt;&lt;center&gt;Dog d =new Dog();&lt;/center&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在 d 中保存的是存取Dog()对象的方法，存储了指向Dog()对象的地址，存储了引用Dog对象的值。&lt;br&gt;对象并没有放进变量中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/HeadFirstJava/01.png&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.orekiyuta.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>How Program Works / After reading</title>
    <link href="http://www.orekiyuta.cn/archives/HowProgramWorks/"/>
    <id>http://www.orekiyuta.cn/archives/HowProgramWorks/</id>
    <published>2020-06-05T13:02:26.000Z</published>
    <updated>2020-06-23T14:35:34.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a><center>CPU</center></h2><ul><li>CPU(Central Processing Unit)[寄存器、控制器、运算器、时钟]</li></ul><p><img src="/images/HowProgramWorks/01.png" alt> </p><ul><li><p>寄存器：暂存指令、数据</p></li><li><p>控制器：把内存上的指令、数据读入寄存器，并根据结果控制计算机</p></li><li><p>运算器：运算从内存读入寄存器的数据</p></li><li><p>时钟：发起计时</p></li><li><p>程序运行的过程:程序启动后,时钟开始计时,控制器从内存中读取指令和数据,运算器计算数据,控制器根据结果控制计算器</p><a id="more"></a><p><img src="/images/HowProgramWorks/02.png" alt> </p></li><li><p>程序把寄存器作为对象来描述</p></li><li>汇编：将汇编语言转成机器语言;反汇编则反之</li><li>数据分为“用于运算的数据”和“表示内存地址的数据”</li><li>累加寄存器存放“用于运算的数据”</li><li>基址寄存器、变址寄存器存放“表示内存地址的数据”</li></ul><p><img src="/images/HowProgramWorks/03.png" alt> </p><ul><li>程序计数器、累加寄存器、标志寄存器、指令寄存器和栈寄存器都只有一个，其他寄存器一般有多个</li><li>CPU是寄存器的集合体</li></ul><p><img src="/images/HowProgramWorks/04.png" alt> </p><ul><li>程序的流程由标志寄存器控制，标志寄存器保存当前流程执行的结果，然后选择路径（跳转指令）</li></ul><p><img src="/images/HowProgramWorks/05.png" alt> </p><p><img src="/images/HowProgramWorks/06.png" alt> </p><p><img src="/images/HowProgramWorks/07.png" alt> </p><ul><li>函数调用（call指令）；return指令讲先前保存到栈中的地址设定到程序计数器中（这样函数就能返回开始调用时的位置）</li></ul><p><img src="/images/HowProgramWorks/08.png" alt> </p><ul><li>通过基址寄存器和变址寄存器来划分内存上的特定区域</li></ul><p><img src="/images/HowProgramWorks/09.png" alt> </p><ul><li>机器语言指令主要类型:数据传送、运算、跳转、call/return</li></ul><h2 id="二进制表示数据"><a href="#二进制表示数据" class="headerlink" title="二进制表示数据"></a><center>二进制表示数据</center></h2><ul><li>8位=1字节</li><li>集成电路（IC）所有引脚，只有直流电压0V或5V两个状态；所以IC一个引脚只能表示两个状态，决定了计算机数据只能采用二进制01来处理。</li><li>最小单位（bit）相当于二进制中的一位；bit（binary digit）</li></ul><p><img src="/images/HowProgramWorks/10.png" alt> </p><ul><li>二进制的位数一般是8的倍数，8位二进制数=1个字节</li><li>字节是最基本的信息计量单位，位是最小单位，字节是基本单位</li><li>内存和磁盘都使用字节单位来存储和读写数据，使用位单位则无法读写数据。因此，字节是信息的基本单位</li><li>二进制 → 十进制</li></ul><p><img src="/images/HowProgramWorks/11.png" alt> </p><ul><li>移位运算：&lt;&lt; 左移低位补0 ；</li></ul><p><img src="/images/HowProgramWorks/12.png" alt> </p><ul><li>移位操作使最高位或最低位溢出的数字，直接丢弃</li></ul><p><img src="/images/HowProgramWorks/13.png" alt> </p><ul><li>移位运算：&gt;&gt; 右移（逻辑、算数）[右移要区分逻辑位移和算术位移]</li><li>二进制表示负数：最高位为符号位；0正1负</li><li>1 二进制为 00000001 ；-1 二进制为 1111111</li><li>表示负数要用“二进制的补数”，补数：用正数来表示负数[比如：1-1 可以换种形式 1+（-1）]</li><li>获得补数：将二进制数位的数值全部取反，再加1</li></ul><p><img src="/images/HowProgramWorks/14.png" alt> </p><ul><li>溢出的位，计算机直接忽略掉</li></ul><p><img src="/images/HowProgramWorks/15.png" alt> </p><p><img src="/images/HowProgramWorks/16.png" alt> </p><ul><li>0 划分为正数 ，所以负数要比正数多一个；各种数据类型都是负数多一个(比如 short -32768~32767)</li><li>逻辑右移：当二进制数的值表示图形模式的时候，移位后需要在最高位补0</li><li>算数右移：当二进制数作为带符号的数值进行运算的时候，移位后要在最高位填充移位前符号位的值（0或1）</li></ul><p><img src="/images/HowProgramWorks/17.png" alt></p><ul><li>符号扩充：保持值不变的前提下将其转换成 16 位和 32 位的二进制数</li></ul><p><img src="/images/HowProgramWorks/18.png" alt></p><ul><li>非：0变1，1变9，取反</li><li>与：两个都为1，结果为1，其他情况为0</li><li>或：只要有1，结果就为1</li><li>异或：两个数不同，结果为1，其他0</li><li>0 false ; 1 true</li></ul><h2 id="小数运算出错的原因"><a href="#小数运算出错的原因" class="headerlink" title="小数运算出错的原因"></a><center>小数运算出错的原因</center></h2><ul><li>0.1累加100次不等于10，结果为10.000002</li><li>原因是有一些十进制的小数无法转换成二进制数（和0.3333···的三倍无法得出1是一个道理）</li><li>原因：（1）采用浮点数来处理小数；（2）位溢出</li></ul><p><img src="/images/HowProgramWorks/19.png" alt></p><ul><li>计算机无法直接处理循环小数</li><li>双精度浮点数类型64位，单精度浮点数类型用32位</li></ul><p><img src="/images/HowProgramWorks/20.png" alt></p><ul><li>回避策略：（1）无视，微小误差可以忽略；（2）把小数转成整数计算 </li></ul><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a><center>内存</center></h2><ul><li>内存是 名为 内存集成电路 的电子元件</li></ul><p><img src="/images/HowProgramWorks/21.png" alt></p><ul><li>1K = 1024</li><li>+5V直流电压表示1，0V表示0</li><li>D0~D7共八个，表示一次可以输入输出8位（1字节）数据</li><li>A0~A9共十个，表示可以指定0000000000～1111111111（1024）地址</li><li>可以得出这个内存集成电路（IC）可以存储1024个1字节的数据，所以该内存IC的容量为1KB</li><li>现实中我们的内存IC会有更多的信号引脚，这样就能在一个内存IC中存储更多数据</li><li>内存IC的物理读写机制</li></ul><p><img src="/images/HowProgramWorks/22.png" alt></p><ul><li>内存逻辑模型</li></ul><p><img src="/images/HowProgramWorks/23.png" alt></p><ul><li>变量占用内存大小</li></ul><p><img src="/images/HowProgramWorks/24.png" alt></p><ul><li>指针</li></ul><p><img src="/images/HowProgramWorks/25.png" alt></p><ul><li>数组占用内存大小</li></ul><p><img src="/images/HowProgramWorks/26.png" alt></p><h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a><center>磁盘</center></h2><ul><li>存储程序方式：程序保存在存储设备（磁盘、内存）中，通过有序地被读取出来实现运行</li></ul><p><img src="/images/HowProgramWorks/27.png" alt></p><ul><li>磁盘缓存，把已经在磁盘读取过的数据保存到内存，下次读取同样的数据就会从内存读取</li></ul><p><img src="/images/HowProgramWorks/28.png" alt></p><ul><li>把低素设备的数据保存在高速设备中，需要时可以直接从告诉设备中读取</li><li>Web浏览器也用到了此缓存方式，把从网络获取的数据暂时保存在磁盘中，需要时再读取</li><li>磁盘缓存：把内存的一部分当作磁盘使用（实际用的是内存）</li><li>虚拟内存：把磁盘的一部分当作内存使用（实际用的是磁盘）</li><li>CPU只能执行加载到内存中的程序</li><li>虚拟内存虽说把磁盘当内存使用，但是实际正在运行的程序，这个时间点是必须存在于内存中的</li><li>所以为了实现虚拟内存，需要把 磁盘的虚拟内存里的内容 与 实际内存里的内容 进行置换</li><li>虚拟内存的方法：（1）分页式[Windows]（2）分段式</li><li>分页式，把运行的程序按照一定大小的页(windows一般情况为 4KB )进行分割；以页为单位再磁盘和内存中置换，从磁盘读入内存（Page In）,反之（Page Out）</li></ul><p><img src="/images/HowProgramWorks/29.png" alt></p><ul><li>虚拟内存可以避免因内存不足导致的应用无法启动问题，从根本上解决还是要增加内存容量</li><li>exe (executable)可执行，DLL （Dynamic Link Library）动态链接库</li></ul><h2 id="压缩数据"><a href="#压缩数据" class="headerlink" title="压缩数据"></a><center>压缩数据</center></h2><ul><li>文件是字节数据的集合，在任何情况下，文件的字节数据都是连续的</li></ul><p><img src="/images/HowProgramWorks/30.png" alt></p><ul><li>RLE算法（Run Length Encoding） [ 数据 X 重复次数 ]</li></ul><p><img src="/images/HowProgramWorks/31.png" alt></p><ul><li>哈夫曼算法 “出现频率高的字符用尽量少的位数编码来表示”</li><li>能够还原到压缩前状态的压缩成为可逆压缩，反之，非可逆压缩</li></ul><p><img src="/images/HowProgramWorks/32.png" alt></p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a><center>运行环境</center></h2><ul><li>运行环境 = 操作系统 + 硬件</li><li>CPU只能解释其自身固有的机器语言</li><li>不同的CPU能解释的机器语言的种类不同，例如：x86、MIPS、SPARC、PowerPC</li><li>转换成 机器语言的程序 称为 本地代码</li><li>文本文件（源代码）在任何环境都能显示和编辑</li><li>源代码 → 编译 → 本地代码（本机CPU可解释的机器语言）</li></ul><p><img src="/images/HowProgramWorks/33.png" alt></p><ul><li>MS-DOS（Microsoft Disk Operating System） → Windows</li><li>Windows 克服了大多数的硬件差异问题</li></ul><p><img src="/images/HowProgramWorks/34.png" alt></p><p><img src="/images/HowProgramWorks/35.png" alt></p><ul><li><p>应用软件必须根据操作系统类型来开发，因为操作系统类型不同，应用程序向操作系统传递指令的途径（API [Application Programming interface]）不同</p></li><li><p>移植：根据不同的运行环境来重新调整程序</p></li><li>Java → 编译 → 字节码 → 运行 → Java虚拟机 → 转换 → 本地代码</li></ul><p><img src="/images/HowProgramWorks/36.png" alt></p><ul><li>从操作系统方面来看，Java虚拟机是一个应用</li><li>从Java应用方面来看，Java虚拟机是运行环境</li><li>不同的Java虚拟机之间无法完整互换</li><li>Java程序运行速度慢，因为Java虚拟机每次运行都需要把字节码转换成本地代码</li><li>BIOS (Basic Input/Output System) , 启动 “引导程序”</li><li>引导程序 把在硬盘等记录的操作系统加载到内存中运行</li></ul><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a><center>编译过程</center></h2><p><img src="/images/HowProgramWorks/37.png" alt></p><ul><li>Windows中exe文件的程序内容，使用的就是本地代码</li></ul><p><img src="/images/HowProgramWorks/38.png" alt></p><ul><li>Dump：把文件的内容，每个字节用2位十六进制数来表示</li></ul><p><img src="/images/HowProgramWorks/39.png" alt></p><ul><li>编译器：将高级语言写的源代码转换成本地代码的程序</li><li>每个高级语言都有它专用的编译器，C语言 —— C编译器</li><li>CPU类型不同，本地代码的类型也不同；因此，编译器和 编程语言种类、CPU类型相关</li><li>例如：Pentium等x86系统CPU用的C编译器，和PowerPC的CPU用的C编译器是不同的</li></ul><p><img src="/images/HowProgramWorks/40.png" alt></p><ul><li>交叉编译器：生成和运行环境中的CPU不同的CPU所使用的本地代码；也就是说可以生成不同于本机CPU类型的本地代码</li></ul><p><img src="/images/HowProgramWorks/41.png" alt></p><ul><li>本地代码是无法直接运行的，需要得到可运行的exe文件，所以编译后还需要进行“链接”处理</li><li>把多个目标文件（.obj）结合，生成1个exe文件的处理就是链接</li><li>运行链接的程序 就称为 链接器</li><li>库文件:把多个目标文件集成到一个文件</li></ul><p><img src="/images/HowProgramWorks/42.png" alt></p><ul><li>内存泄漏：如果没有在程序中释放堆的内存空间，该内存空间会一直残留</li><li><p>内存泄漏如果一直存在，就有可能会造成内存不足从而导致宕机</p></li><li><p>编译器：在运行前对源代码进行解释处理</p></li><li>解释器：在运行时对源代码内容一行一行的进行解释处理</li><li>分割编译：将整个程序分成多个源代码来编写，然后分别进行编译，最后链接成一个exe文件</li></ul><h2 id="操作系统与应用"><a href="#操作系统与应用" class="headerlink" title="操作系统与应用"></a><center>操作系统与应用</center></h2><ul><li>仅具有加载和运行功能的监控程序，是操作系统的原型</li></ul><p><img src="/images/HowProgramWorks/43.png" alt></p><ul><li>随着时代发展，渐渐的把同样处理的程序集成到监控程序中</li></ul><p><img src="/images/HowProgramWorks/44.png" alt></p><ul><li>操作系统可以说是多个程序的集合体 </li></ul><p><img src="/images/HowProgramWorks/45.png" alt></p><ul><li>各种应用只是在利用操作系统的功能而已</li><li>在操作系统诞生后，就不需要再编写直接控制硬件的程序了</li><li>这样制作软件应用逐渐与硬件分离，也就解耦了；无需再考虑硬件问题，硬件问题交给操作系统去处理</li></ul><p><img src="/images/HowProgramWorks/46.png" alt></p><ul><li>高级语言不依赖特定的操作系统，使用独自的函数名，然后在编译时将其转换成相应操作系统的系统调用</li></ul><p><img src="/images/HowProgramWorks/47.png" alt></p><ul><li>操作系统和高级语言能够使硬件抽象化</li><li>文件是操作系统对磁盘媒介空间的抽象化</li></ul><p><img src="/images/HowProgramWorks/48.png" alt></p><ul><li>时钟分割：短时间间隔内，多个程序切换运行的方式；Windsows通过这种方式实现多任务功能</li></ul><p><img src="/images/HowProgramWorks/49.png" alt></p><ul><li>中间件：处于操作系统和应用的中间</li><li>系统软件：操作系统和中间件合合在一起</li></ul><p><img src="/images/HowProgramWorks/50.png" alt></p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a><center>汇编</center></h2><ul><li>汇编语言的源文件 .asm （assembler）</li><li>汇编语言：使用助记符的编程语言</li><li>汇编语言源代码 → 用汇编器转换 → 本地代码</li><li>在将源代码转换成本地代码这个功能上，汇编器和编译器是同样的</li><li>汇编语言的编写的源代码，和本地代码一一对应</li></ul><p><img src="/images/HowProgramWorks/51.png" alt></p><ul><li>C语言源代码 → 编译 → 本地代码 → 反汇编 → 汇编源代码</li><li>可以通过以上反汇编的方式，分析其代码内容；一般的逆向工程</li><li>汇编语言的源代码：由 （1）转换成本地代码的指令（2）针对汇编器的伪指令 构成</li><li>伪指令负责把程序的构造和汇编的方法指示给汇编器；伪指令本身是无法汇编转换成本地代码的</li></ul><p><img src="/images/HowProgramWorks/52.png" alt></p><p><img src="/images/HowProgramWorks/53.png" alt></p><ul><li>由伪指令 segment 和 ends 围起来的部分，是给构成程序的命令和数据的集合体加上一个名字而得到的，称为 段定义</li><li>在程序中，段定义指的是命令和数据等程序的集合体的意思</li><li>段定义是一个连续的内存空间</li><li>一个程序由多个段定义构成</li><li>源代码的开始位置，定义了 3 个名称分别为 _TEXT、_DATA、_BSS的段定义</li><li>_TEXT 是指令的段定义</li><li>_DATA 是被初始化（有初始值）的数据的段定义</li><li>_BSS 是尚未初始化的数据的段定义</li><li>group这一伪指令，表示的是把_BSS 和 _DATA 这两个段定义汇总为名为 DGROUP 的组</li><li>group 指的是将源代码中不同的段定义在本地代码程序中整合为一个</li><li>围起 _AddNum 和 _MyFun 的 _TEXT segment 和 _TEXT ends，表示 _AddNum 和 _MyFunc 是属于 _TEXT 这一段定义的</li><li>_AddNum proc 和 _AddNum endp 围起来的部分，以及 _MyFunc proc 和 MyFunc endp 围 起来的部分，分别表示 AddNum 函数和 MyFunc 函数的范围</li><li>伪指令 proc 和 endp 围起来的部分，表示的是 过程（procedure）的范围；在汇编语言中，这种相当于 C 语言的函数的形式称为过程</li><li>末尾的 end 伪指令，表示的是源代码的结束</li><li>在汇编语言中，一行表示对CPU的一个指令</li><li>汇编语言指令的语法结构是操作码 + 操作数 （也存在只有操作码没有操作数的指令）</li><li>操作码表示的是指令动作，操作数表示的是指令对象</li><li>能够使用何种形式的操作码，是由 CPU 的种类决定的</li><li>32 位 x86 系列 CPU 用的操作码</li></ul><p><img src="/images/HowProgramWorks/54.png" alt></p><ul><li>本地代码加载到内存后才能运行；内存中存储着构成本地代码的指令和数据</li><li>CPU从内存中把指令和数据读出，然后由存储在CPU内部的寄存器来处理</li></ul><p><img src="/images/HowProgramWorks/55.png" alt></p><ul><li>寄存器不仅有存储指令和数据的功能，也有运算的功能</li></ul><p><img src="/images/HowProgramWorks/56.png" alt></p><ul><li>LIFO （Last In First Out）; push 入栈 ， pop 出栈</li></ul><p><img src="/images/HowProgramWorks/57.png" alt></p><h2 id="硬件控制"><a href="#硬件控制" class="headerlink" title="硬件控制"></a><center>硬件控制</center></h2><ul><li>应用通过系统调用间接控制硬件</li></ul><p><img src="/images/HowProgramWorks/58.png" alt></p><ul><li>计算机主机中附带了用来连接外部设备的连接器，各个连接器内部都有用来交换主机和外设之间电流特性的IC,这些IC（集成电路）统称为 I/O 控制器</li><li>由于电压不同，数字信号和模拟信号的电流特征不同，主机和外设无法直接连接，I/O 控制器就是用来解决此类问题的</li><li>I/O 控制器中有用于临时保存输入输出数据的内存，这个内存就是 端口 ，也称为 寄存器</li><li>I/O 寄存器主要是用来临时存储数据的，CPU内部的寄存器是用来进行运算处理的</li><li>各端口之间通过 端口号 区分，也称为 I/O 地址</li></ul><p><img src="/images/HowProgramWorks/59.png" alt></p><ul><li>IRQ(Interrupt Request) 中断请求</li><li>IRQ 是用来暂停当前正在运行的程序，并跳转到其他程序运行的必要机制，该机制称为中断处理</li></ul><p><img src="/images/HowProgramWorks/60.png" alt></p><p><img src="/images/HowProgramWorks/61.png" alt></p><ul><li>DMA(Direct Memory Access):在不通过CPU的情况下，外围设备直接和主内存进行数据传送</li></ul><p><img src="/images/HowProgramWorks/62.png" alt></p><ul><li>VRAM(Video RAM):显示器中呈现的内容信息一直存储在某内存中</li></ul><p><img src="/images/HowProgramWorks/63.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CPU&quot;&gt;&lt;a href=&quot;#CPU&quot; class=&quot;headerlink&quot; title=&quot;CPU&quot;&gt;&lt;/a&gt;&lt;center&gt;CPU&lt;/center&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CPU(Central Processing Unit)[寄存器、控制器、运算器、时钟]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/HowProgramWorks/01.png&quot; alt&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;寄存器：暂存指令、数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;控制器：把内存上的指令、数据读入寄存器，并根据结果控制计算机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运算器：运算从内存读入寄存器的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时钟：发起计时&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;程序运行的过程:程序启动后,时钟开始计时,控制器从内存中读取指令和数据,运算器计算数据,控制器根据结果控制计算器&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OS" scheme="http://www.orekiyuta.cn/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>さきざき</title>
    <link href="http://www.orekiyuta.cn/archives/Usakizaki/"/>
    <id>http://www.orekiyuta.cn/archives/Usakizaki/</id>
    <published>2020-05-21T06:04:24.000Z</published>
    <updated>2020-05-30T04:39:00.405Z</updated>
    
    <content type="html"><![CDATA[<p>この長い長い旅のその意味を 希望をつなぐため</p><p>今隣に座るきみは 以前より少し大人に見えるよ</p><p>でも目覚めた朝 谁も居ないんだね</p><a id="more"></a><p>炎天下 愿った少年 「あの顷」に立っていたんだ</p><p>期待ハズレの世界の隙間 予報外れの雨が降ってきた</p><p>夢を見せたくせに 叶えれる力を与えてくれないなんて</p><p>宵街を行く人だかりは 嬉しそうだったり 寂しそうだったり</p><p>君はどんな颜だっけ　なぜだろう 思い出せないな</p><p>キミは泣いた後笑える はずだからって言ったんだ</p><p>あの日から 変わらず いつまでも変わらずに  いられなかったこと 悔しくて 指を离す</p><p>逃げ出したいと思うこの気持ちに 見つめられると呼吸もできない</p><p>振り返ってみても いないのは分かってる</p><p>空が変わり果て 星は巡ってゆく 目覚めたらすぐに 今日も歩きだそう</p><p>待っているよ 月が綺麗な夜に会おう ここにいるよ あの日のまま</p><p>いつも见ていた　近いようで远くて いつだって　届かない</p><p>言叶を知らないままならば この瞳を闭じることも 简単だったのに</p><p>少し前に进んでみよう まなざしを高く上げて</p><p>翼消えて 見えなくなっても あなたのいるところに 私がいる</p><p>飾った写真達が 笑ったまま 止めどない明日に変わらない僕たちを</p><p>と過ごせる今が このまま続けばなんて</p><p>この季節が迎えに来たら 君の姿もう探す事も 出来なくなっちゃうんだね</p><p>けど そんな出会いを 别れを 缲り返して 「今の私」よりも すてきになっていますか</p><p>君が描いた未来の世界は いつかの空に導かれて</p><p>君の描く未来に 私はいるのかな 同じ空を 同じ想いで 見上げていたいよ</p><p>见送った 手を振った ありがとう</p><p>恐いものなんかない 例え化け物になろうとも 成し遂げる</p><p>また嫌いなトコがふえた 解ってんだよ　言叶は自分自身だ</p><p>何もかも失くしても 捧げるものがあるの</p><p>いつも新しい 空を見せてあげよう</p><p>曖昧な世界を照らすような</p><p>人たちはこの空飛ぶことは叶わないけど その代わりいま流す涙は天に昇りまた 雨となり還る</p><p>この場所に ただいま言うからね</p><p>见せてやる  本当は強かった ときのこと</p><p>永遠なんて望みはしない たとえちっぽけでも構わない</p><p>でも僕は君じゃないから 伝えることしか出来なくて</p><p>そう 解っている答えなど 捨ててしまえ</p><p>孤独を捨てたって 君は君だから</p><p>目を閉じてたら気付けない事が 沢山あるんだ</p><p>小さく揺れた向日葵 サヨナラも言えないまま</p><p>離れてても 同じ空見上げて</p><p>通り過ぎていった時間の捉え方で 「現在」が変わっていく</p><p>あの瞬間 あの場面が キミにとって特別なら 過去は離れて 行くものなんかじゃなくて</p><p>振り返るともうない  僕らは何も何もまだ知らぬ</p><p>何も言はず泣けだらいいね 涙か涸れだら終わり もっと僕が强くなぃなきゃ 悲しみは自立への一步</p><p>何年前のことでしょう 二度と戻れないあの場所に 置いてきてしまったぼくの心さ</p><p>今も何度でもボクは夏の面影の中 繰り返すよ</p><p>鮮やかすぎる 君がいない夏 あの声 あの仕草が 広がってく</p><p>どしゃぶりでもかまわないと ずぶぬれでもかまわないと しぶきあげるきみが消えてく</p><p>涙がかわくまでは もう少し この雨に打たれていたくて</p><p>溢れ出したこの痛みは 全て一人で抱き締める</p><p>もういいか そんなこと 笑ってよ 終わるその日には</p><p>理想なんて もう 燃え尽きてしまったの 弱虫の耳鸣りはやまない</p><p>時の風に 流されて 落ちていく</p><p>泣いたままで あなたの頬を叩く</p><p>僕にはわかるんだ 嘘をついている君が 泣いていいよ ここにずっといるから</p><p>無邪気な時には戻れない もう二度と</p><p>心押し殺すこと それひとつだけ</p><p>アタシは弱い 弱い 弱い 涙の行方を貴方は知らない</p><p>君とあの日に残した 約束の果てに私は 透明になっていくのだろう 今更善意なんて 似合わないと思うけど</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;この長い長い旅のその意味を 希望をつなぐため&lt;/p&gt;
&lt;p&gt;今隣に座るきみは 以前より少し大人に見えるよ&lt;/p&gt;
&lt;p&gt;でも目覚めた朝 谁も居ないんだね&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Preliminary use Mongodb</title>
    <link href="http://www.orekiyuta.cn/archives/PreliminaryUseMongodb/"/>
    <id>http://www.orekiyuta.cn/archives/PreliminaryUseMongodb/</id>
    <published>2019-12-19T11:56:48.000Z</published>
    <updated>2020-01-01T16:07:05.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a><center>安装启动</center></h3><ul><li><code>docker pull mongo</code></li><li><code>docker run -d -p 127.0.0.1:27017:27017 --name mymongo mongo</code></li><li><code>docker exec -it mymongo mongo</code></li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><center>数据库</center></h3><ul><li><code>show dbs</code></li><li><code>use elias</code> 建立数据库 elias</li><li><code>db</code> 当前所在数据库</li><li><code>db.dropDatabase()</code></li></ul><a id="more"></a><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a><center>集合</center></h3><ul><li><p><code>db.createCollection(&quot;post&quot;)</code> 建集合(表) post 👉<a href="https://www.runoob.com/mongodb/mongodb-databases-documents-collections.html" target="_blank" rel="noopener">MongoDB 概念解析</a></p></li><li><p><code>show collections</code></p></li><li><code>db.[collectionsName].drop()</code></li></ul><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a><center>文档</center></h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><ul><li><code>db.[collectionsName].insertOne()</code></li><li><code>db.[collectionsName].insert({key:&quot;value&quot;})</code></li><li>也可以把数据先赋给变量 , 再插入变量  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document=(&#123;tiltle:&quot;20191220&quot;,by:&apos;elias&apos;,tag:&apos;note&apos;&#125;)</span><br><span class="line">db.[collectionsName].insert(document)</span><br></pre></td></tr></table></figure></li></ul><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><ul><li><p><code>db.[collectionName].updateOne({key:&quot;value&quot;} , {$set:{key:&quot;Newvalue&quot;} )</code> 符合 key=value 的文档的 key 的 value 修改为 Newvalue ; $set 如果该文档没有该域(字段) , 则会追加上去</p></li><li><p><code>db.[collectionName].updateOne({key:&quot;value&quot;} , {$set:{key:&quot;Newvalue&quot;} , {multi:true})</code> 修改多条符合条件的值</p></li><li><p><code>db.[collectionName].updateOne({key:&quot;value&quot;} , {$unset:{key:&quot;Newvalue&quot;} )</code>  删除符合 key=value 的文档的 key 域(字段)</p></li><li><p><code>db.[collectionName].updateMany()</code></p></li><li><p><code>db.[collectionName].update( {key:&quot;value&quot;},{$inc: {key2:2}} )</code> 符合 key=value 的文档的 key2 的 value 加 2</p></li><li><p><code>db.[collectionName].update( {key:&quot;value&quot;},{$mul: {key2:2}} )</code> 符合 key=value 的文档的 key2 的 value 乘 2</p></li><li><p><code>db.[collectionName].update( {key:&quot;value&quot;},{$rename: {key2:key3}} )</code> 符合 key=value 的文档的 key2 改名为 key3</p></li><li><p><code>db.[collectionName].updateOne({key:&quot;value&quot;} ,{key:&quot;value&quot;,key2:&quot;value2&quot;,...} , {upsert:true})</code> 有符合条件文档的就更新 , 没有则插入该文档</p></li></ul><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul><li><code>db.[collectionName].deleteOne()</code></li><li><code>db.[collectionName].deleteMany()</code></li></ul><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><ul><li><code>db.[collectionsName].find()</code> 查看文档</li><li><code>db.[collectionsName].find().pretty()</code> </li><li><code>db.[collectionsName].find()</code></li><li><code>db.[collectionsName].findOne()</code></li><li><code>db.[collectionsName].find({},{_id:0})</code> 0 查询结果不包含id , 1 反之</li><li><code>db.[collectionsName].find({key:&quot;value&quot;})</code></li><li><code>db.[collectionsName].find({key:{$gte:3}})</code> 大于等于3 <strong>$gte</strong></li><li><code>db.[collectionsName].find({key:{$gt:3}})</code> 大于 <strong>$gt</strong></li><li><code>db.[collectionsName].find({key:{$lte:3}})</code> 小于等于 <strong>$lte</strong></li><li><code>db.[collectionsName].find({key:{$lt:3}})</code> 小于 <strong>$lt</strong></li><li><code>db.[collectionsName].find({key:{$regex:&quot; &quot;}})</code> 正则表达式</li><li><code>db.[collectionsName].find({key:/ /})</code></li><li><p><code>db.[collectionsName].find({key:{$regex:&quot; &quot;},key2:{$gt:3},...,...})</code> 复合条件,筛选同时符合条件的数据</p></li><li><p><code>db.[collectionsName].find({ $or: [{key:/ /},{key2:{$gt:3}}] })</code>  筛选符合 key 或者 key2 的数据</p></li><li><p><code>db.[collectionsName].find({key:{$in : [..,..,..]}})</code> 和 select in 一样</p></li><li><code>db.[collectionsName].distinct(&quot;key&quot;)</code> 取出键所含的内容</li><li><code>db.[collectionsName].find({...}).sort({key:1})</code> 1 升序 , -1 降序</li><li><code>db.[collectionsName].find({...}).limit(3)</code> 提取前三条文档</li><li><code>db.[collectionsName].find({...}).skip(3)</code> 跳过三条文档</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a><center>索引</center></h3><ul><li><code>db.[collectionsName].getIndexes()</code> 默认索引</li><li><code>db.[collectionsName].createIndex({key:1})</code> 以 key 升序建立索引 ; -1 降序</li><li><code>db.[collectionsName].dropIndex({key:1})</code> 删除索引</li><li><code>db.[collectionsName].createIndex({key:1},{unique:true})</code> 升序唯一索引 , 之后新建文档的 key 的 value 不能与前面的重复</li></ul><h3 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h3><ul><li><a href="https://hub.docker.com/_/mongo/?tab=description" target="_blank" rel="noopener">mongo - Docker Hub</a></li><li><a href="https://docs.mongodb.com/manual/reference/command/" target="_blank" rel="noopener">Database Commands - MongoDB Manual</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装启动&quot;&gt;&lt;a href=&quot;#安装启动&quot; class=&quot;headerlink&quot; title=&quot;安装启动&quot;&gt;&lt;/a&gt;&lt;center&gt;安装启动&lt;/center&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker pull mongo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -d -p 127.0.0.1:27017:27017 --name mymongo mongo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker exec -it mymongo mongo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;&lt;center&gt;数据库&lt;/center&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;show dbs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use elias&lt;/code&gt; 建立数据库 elias&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db&lt;/code&gt; 当前所在数据库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db.dropDatabase()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Mongodb" scheme="http://www.orekiyuta.cn/tags/Mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Docker Note</title>
    <link href="http://www.orekiyuta.cn/archives/DockerNote/"/>
    <id>http://www.orekiyuta.cn/archives/DockerNote/</id>
    <published>2019-12-18T14:59:00.000Z</published>
    <updated>2019-12-20T08:36:26.180Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><center>常用命令</center></h3><ul><li><code>docker version</code></li><li><code>systemctl start docker</code></li></ul><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h4><ul><li><code>docker image ls</code></li><li><code>docker image rm [imageName]</code></li><li><code>docker image pull [imageName]</code></li><li><code>docker inspect [imageName]</code> 获取元数据</li></ul><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><ul><li><code>docker container run [imageName]</code></li><li><code>docker container run -it [imageName] bash</code></li><li><code>docker container kill [containerID]</code> id不用填完整 , 能够唯一定位到即可</li><li><code>docker container ls</code></li><li><code>docker container ls --all</code></li><li><code>docker container rm [containerID]</code></li><li><code>docker container stop [containerID]</code>  //container 可省略</li><li><code>docker container start [containerID]</code></li><li><code>docker container logs [containerID]</code></li><li><code>docker container exec -it [containerID] /bin/bash</code></li><li><code>docker container inspect [containerID/Name]</code></li></ul><a id="more"></a><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a><center>Dockerfile</center></h3><h4 id="dockerignore"><a href="#dockerignore" class="headerlink" title=".dockerignore"></a>.dockerignore</h4><p>忽略内容 , 和 git 的 .gitignore 一个意思<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br></pre></td></tr></table></figure></p><h4 id="Dockerfile-1"><a href="#Dockerfile-1" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM node:8.4</span><br><span class="line">COPY . /app</span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class="line">EXPOSE 3000</span><br></pre></td></tr></table></figure><ul><li>FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node</li><li>COPY . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录</li><li>WORKDIR /app：指定接下来的工作路径为/app</li><li>RUN npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件</li><li>EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口</li><li><code>.</code> 👉<a href="https://yeasy.gitbooks.io/docker_practice/content/image/build.html" target="_blank" rel="noopener">镜像构建上下文</a></li></ul><h4 id="创建-image-镜像"><a href="#创建-image-镜像" class="headerlink" title="创建 image 镜像"></a>创建 image 镜像</h4><ul><li><code>docker image build -t [name] .</code></li><li><code>docker image build -t [name]:0.0.1 .</code></li><li><code>.</code> 表示<strong>上下文路径</strong></li><li><code>-t</code> 指定名称</li></ul><h4 id="生成容器"><a href="#生成容器" class="headerlink" title="生成容器"></a>生成容器</h4><ul><li><code>docker container run -p 2222:3333 -it [name] /bin/bash</code></li><li><code>docker container run -p 2222:3333 -it [name]:0.0.1 /bin/bash</code></li><li><code>-p</code> 映射端口 , 本机:容器 { <strong>127.0.0.1:2222:3333</strong> / <strong>[ip]:2222:3333</strong> / <strong>[不填]2222:3333</strong> 默认为 <strong>0.0.0.0:2222:3333</strong> } </li><li><code>-it</code> 容器的 Shell 映射到当前的 Shell，在本机窗口输入的命令，就会传入容器</li><li><code>/bin/bash</code> 启动容器内 bash</li></ul><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a><center>Docker Compose</center></h3><ul><li><code>docker-compose --version</code></li><li><p>docker-compose.yml</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    environment:</span><br><span class="line">    - MYSQL_ROOT_PASSWORD=123456</span><br><span class="line">    - MYSQL_DATABASE=wordpress</span><br><span class="line">web:</span><br><span class="line">    image: wordpress</span><br><span class="line">    links:</span><br><span class="line">    - mysql</span><br><span class="line">    environment:</span><br><span class="line">    - WORDPRESS_DB_PASSWORD=123456</span><br><span class="line">    ports:</span><br><span class="line">    - &quot;127.0.0.3:8080:80&quot;</span><br><span class="line">    working_dir: /var/www/html</span><br><span class="line">    volumes:</span><br><span class="line">    - wordpress:/var/www/html</span><br></pre></td></tr></table></figure></li><li><p><code>docker-compose up</code></p></li><li><code>docker-compose stop</code></li><li><code>docker-compose rm</code></li></ul><h3 id="修改镜像源"><a href="#修改镜像源" class="headerlink" title="修改镜像源"></a><center>修改镜像源</center></h3><ul><li><p>在阿里云找到镜像加速器</p><p>  <img src="/images/DockerNote/01.png" alt></p></li><li><p>在服务器 <code>/etc/docker</code> 下 , 新建 daemon.json , 添加镜像地址</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://0f2b6859.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="/images/DockerNote/02.png" alt></p></li></ul><h3 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h3><ul><li><a href="https://docs.docker.com/get-started/part2/" target="_blank" rel="noopener">Docker</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">Docker — 从入门到实践</a></li><li><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 入门教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;&lt;center&gt;常用命令&lt;/center&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;systemctl start docker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;镜像&quot;&gt;&lt;a href=&quot;#镜像&quot; class=&quot;headerlink&quot; title=&quot;镜像&quot;&gt;&lt;/a&gt;镜像&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker image ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image rm [imageName]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image pull [imageName]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker inspect [imageName]&lt;/code&gt; 获取元数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;容器&quot;&gt;&lt;a href=&quot;#容器&quot; class=&quot;headerlink&quot; title=&quot;容器&quot;&gt;&lt;/a&gt;容器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker container run [imageName]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container run -it [imageName] bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container kill [containerID]&lt;/code&gt; id不用填完整 , 能够唯一定位到即可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container ls --all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container rm [containerID]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container stop [containerID]&lt;/code&gt;  //container 可省略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container start [containerID]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container logs [containerID]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container exec -it [containerID] /bin/bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container inspect [containerID/Name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Docker" scheme="http://www.orekiyuta.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>What is JS? ES? TS?</title>
    <link href="http://www.orekiyuta.cn/archives/SortOutJSESTS/"/>
    <id>http://www.orekiyuta.cn/archives/SortOutJSESTS/</id>
    <published>2019-12-17T09:21:02.000Z</published>
    <updated>2019-12-20T08:36:39.794Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一图理清浏览器脚本语言"><a href="#一图理清浏览器脚本语言" class="headerlink" title="一图理清浏览器脚本语言"></a><center>一图理清浏览器脚本语言</center></h3><p><img src="/images/SortOutJSESTS/01.png" alt></p><ul><li><p>简而言之 , 就是 js 设计之处有很多缺陷,然后为了弥补缺陷不断的更新 ES 标准 , js 不断的实现新标准修复缺陷 , 这样下去越来越麻烦 , 其他开发者看不下去了就直接按照 ES 标准实现自己的编译器和语言 , 最后转成 js </p></li><li><p>按照这样发展下去 , js 有发展成浏览器的汇编趋势</p></li><li><p>现有新的技术不转成 js , 自己去兼容浏览器打破 js 垄断浏览器。例如: Dart</p></li></ul><a id="more"></a><h3 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h3><ul><li><a href="https://www.zhihu.com/question/361303428" target="_blank" rel="noopener">es,js,ts三者有什么关系？</a></li><li><a href="https://www.jianshu.com/p/1cd0b2cb3ec4" target="_blank" rel="noopener">JavaScript的历史</a></li><li><a href="http://javascript.ruanyifeng.com/introduction/history.html" target="_blank" rel="noopener">JavaScript语言的历史</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一图理清浏览器脚本语言&quot;&gt;&lt;a href=&quot;#一图理清浏览器脚本语言&quot; class=&quot;headerlink&quot; title=&quot;一图理清浏览器脚本语言&quot;&gt;&lt;/a&gt;&lt;center&gt;一图理清浏览器脚本语言&lt;/center&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/SortOutJSESTS/01.png&quot; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简而言之 , 就是 js 设计之处有很多缺陷,然后为了弥补缺陷不断的更新 ES 标准 , js 不断的实现新标准修复缺陷 , 这样下去越来越麻烦 , 其他开发者看不下去了就直接按照 ES 标准实现自己的编译器和语言 , 最后转成 js &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按照这样发展下去 , js 有发展成浏览器的汇编趋势&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现有新的技术不转成 js , 自己去兼容浏览器打破 js 垄断浏览器。例如: Dart&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://www.orekiyuta.cn/tags/JavaScript/"/>
    
      <category term="ECMAScript" scheme="http://www.orekiyuta.cn/tags/ECMAScript/"/>
    
      <category term="TypeScript" scheme="http://www.orekiyuta.cn/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Thinking Shift</title>
    <link href="http://www.orekiyuta.cn/archives/ThinkingShift/"/>
    <id>http://www.orekiyuta.cn/archives/ThinkingShift/</id>
    <published>2019-12-15T17:17:36.000Z</published>
    <updated>2019-12-15T18:12:10.818Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一次编程思想的转变"><a href="#一次编程思想的转变" class="headerlink" title="一次编程思想的转变"></a><center>一次编程思想的转变</center></h3><p>⭐<strong>不能局限于细节 , 还要纵观整体</strong>⭐</p><ul><li><p>昨天发现一个很不错的 js 库 👉<a href="http://www.goat1000.com/tagcanvas.php" target="_blank" rel="noopener">tagcanvas</a></p></li><li><p>所以今天就打算整合到 hexo 博客中,首先是看了 Next 主题的代码格式 , 按照规范写好了对应的文件 , 并且 tagcanvas 也成功显示在页面了</p></li><li><p>但是数据还是固定的 , 需要把 hexo 的 tag 数据引过来输入到 tagcanvas 中</p></li><li><p>通过反复阅读源码 , 先是确定了原始 tagcloud 的位置在 <code>/next/layout/page.swig</code> </p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tag-cloud-tags"</span>&gt;</span></span><br><span class="line">    &#123;&#123; tagcloud(&#123;min_font: 15, max_font: 30, amount: 999, color: true, start_color: '#827878', end_color: '#000000'&#125;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>调试后确定了 tagcloud 是个方法 , 然后查找资料定位到了 <code>/node_modules/hexo/lib/plugins/helper/tagcloud.js</code></p></li><li><p>大概阅读 tagcloud.js 一遍后 , 可见 tagcloud 通过一定的算法处理后会输出 tag标签 <code>&lt;li/&gt;</code></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tags.forEach(<span class="function"><span class="params">tag</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ratio = length ? sizes.indexOf(tag.length) / length : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> size = min + ((max - min) * ratio);</span><br><span class="line">    <span class="keyword">let</span> style = <span class="string">`font-size: <span class="subst">$&#123;<span class="built_in">parseFloat</span>(size.toFixed(<span class="number">2</span>))&#125;</span><span class="subst">$&#123;unit&#125;</span>;`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (color) &#123;</span><br><span class="line">    <span class="keyword">const</span> midColor = startColor.mix(endColor, ratio);</span><br><span class="line">    style += <span class="string">` color: <span class="subst">$&#123;midColor.toString()&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result.push(</span><br><span class="line">    <span class="string">`&lt;a href="<span class="subst">$&#123;self.url_for(tag.path)&#125;</span>" style="<span class="subst">$&#123;style&#125;</span>"&gt;<span class="subst">$&#123;transform ? transform(tag.name) : tag.name&#125;</span>&lt;/a&gt;`</span></span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>到此我的想法是 <strong>首先 tagcanvas 需要接受 url 参数 和 text 参数 , 应该修改一下 tagcloud.js 源码 , 让它输出想要的参数</strong></p></li><li><p>想了之后 , 如果这样做 , 之后会不会对其他地方产生影响 , 再加上修改此处的成本也不低 , 之后尝试问题的话维护成本也不低</p></li><li><p>然后想到了一种办法 <strong>不修改 tagcloud.js 源码 , 转为操作 DOM 在页面直接获取已经生成好的数据 , 然后传给 tagcanvas</strong></p></li><li><p>一波操作后 , 又遇到了一些问题 , 又想了想 , 这样操作 DOM 的话 ; 要是 hexo 的生命周期和我写在文件里的 DOM 操作的生命周期不一致的话也会出现问题 ; </p></li><li><p>想了想 , hexo 是把代码打包编译成静态文件的 , 那么我写在文件里的 DOM 操作在编译的时候并没有对应的节点 , 对应的节点应该是编译完成后才产生的 , 这样一来这个办法就行不通了</p></li><li><p>最后想了想 , <strong>其实前面早就有结果了 , 只是思维没有转过来</strong></p></li></ul><hr><ul><li><p>前面的 <strong>tagcloud 通过一定的算法处理后会输出 tag标签 <code>&lt;li/&gt;</code></strong> , 其实这里就可以直接利用 <code>&lt;li/&gt;</code> , <strong>把输出的一群 <code>&lt;li/&gt;</code> 当作个对象去思考</strong> </p></li><li><p>tagcloud 输出的 <code>&lt;li/&gt;</code> 是符合了 tagcanvas 输入规范的 ; tagcloud 输出的 <code>&lt;li/&gt;</code> 已经具备了 url 参数和 text 参数 , 这样的话 tagcanvas 也能正确处理</p></li><li><p>最后把 <code>/next/layout/page.swig</code> 中输出标签的代码迁移到 tagcanvas 页面对应的地方即可</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; tagcloud(&#123;<span class="attr">min_font</span>: <span class="number">15</span>, <span class="attr">max_font</span>: <span class="number">30</span>, <span class="attr">amount</span>: <span class="number">999</span>, <span class="attr">color</span>: <span class="literal">true</span>, <span class="attr">start_color</span>: <span class="string">'#827878'</span>, <span class="attr">end_color</span>: <span class="string">'#000000'</span>&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>还有个类似的库也值得去尝试一下 👉<a href="https://www.jasondavies.com" target="_blank" rel="noopener">jasondavies</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一次编程思想的转变&quot;&gt;&lt;a href=&quot;#一次编程思想的转变&quot; class=&quot;headerlink&quot; title=&quot;一次编程思想的转变&quot;&gt;&lt;/a&gt;&lt;center&gt;一次编程思想的转变&lt;/center&gt;&lt;/h3&gt;&lt;p&gt;⭐&lt;strong&gt;不能局限于细节 , 还要纵观整体&lt;/strong&gt;⭐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;昨天发现一个很不错的 js 库 👉&lt;a href=&quot;http://www.goat1000.com/tagcanvas.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tagcanvas&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所以今天就打算整合到 hexo 博客中,首先是看了 Next 主题的代码格式 , 按照规范写好了对应的文件 , 并且 tagcanvas 也成功显示在页面了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;但是数据还是固定的 , 需要把 hexo 的 tag 数据引过来输入到 tagcanvas 中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过反复阅读源码 , 先是确定了原始 tagcloud 的位置在 &lt;code&gt;/next/layout/page.swig&lt;/code&gt; &lt;/p&gt;
  &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;tag-cloud-tags&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&amp;#123; tagcloud(&amp;#123;min_font: 15, max_font: 30, amount: 999, color: true, start_color: &#39;#827878&#39;, end_color: &#39;#000000&#39;&amp;#125;) &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调试后确定了 tagcloud 是个方法 , 然后查找资料定位到了 &lt;code&gt;/node_modules/hexo/lib/plugins/helper/tagcloud.js&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大概阅读 tagcloud.js 一遍后 , 可见 tagcloud 通过一定的算法处理后会输出 tag标签 &lt;code&gt;&amp;lt;li/&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tags.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;tag&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ratio = length ? sizes.indexOf(tag.length) / length : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; size = min + ((max - min) * ratio);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; style = &lt;span class=&quot;string&quot;&gt;`font-size: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;&lt;span class=&quot;built_in&quot;&gt;parseFloat&lt;/span&gt;(size.toFixed(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&amp;#125;&lt;/span&gt;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;unit&amp;#125;&lt;/span&gt;;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (color) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; midColor = startColor.mix(endColor, ratio);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    style += &lt;span class=&quot;string&quot;&gt;` color: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;midColor.toString()&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result.push(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;`&amp;lt;a href=&quot;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;self.url_for(tag.path)&amp;#125;&lt;/span&gt;&quot; style=&quot;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;style&amp;#125;&lt;/span&gt;&quot;&amp;gt;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;transform ? transform(tag.name) : tag.name&amp;#125;&lt;/span&gt;&amp;lt;/a&amp;gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="get" scheme="http://www.orekiyuta.cn/tags/get/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 Knowledge Point</title>
    <link href="http://www.orekiyuta.cn/archives/CSS3KnowledegePoint/"/>
    <id>http://www.orekiyuta.cn/archives/CSS3KnowledegePoint/</id>
    <published>2019-12-15T11:19:05.000Z</published>
    <updated>2019-12-17T07:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="属性是否可继承"><a href="#属性是否可继承" class="headerlink" title="属性是否可继承"></a><center>属性是否可继承</center></h3><h4 id="测试能否继承"><a href="#测试能否继承" class="headerlink" title="测试能否继承"></a>测试能否继承</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-Hans"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Elias<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-tag">red</span>; <span class="comment">/* 可继承 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 3<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">green</span>; <span class="comment">/* 不可继承 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS3注意点<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello Elias<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/CSS3/01.png" alt></p><p>可观察到 <code>&lt;h1/&gt;</code>和<code>&lt;p/&gt;</code> 继承了 body 的 color 属性 , 而没有继承 border 属性</p><p>了解哪些属性可以被继承 👉<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference" target="_blank" rel="noopener">MDN web docs</a></p><h4 id="强制继承"><a href="#强制继承" class="headerlink" title="强制继承"></a>强制继承</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-Hans"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Elias<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-tag">red</span>; <span class="comment">/* 可继承 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 3<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">green</span>; <span class="comment">/* 不可继承 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">h1&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span><span class="selector-pseudo">:inherit</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS3注意点<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello Elias<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置属性值为 inherit , 可强制继承父级对应属性</p><p><img src="/images/CSS3/02.png" alt></p><h3 id="垂直对齐"><a href="#垂直对齐" class="headerlink" title="垂直对齐"></a><center>垂直对齐</center></h3><p><img src="/images/CSS3/03.png" alt></p><p><img src="/images/CSS3/04.png" alt></p><p>👉<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/vertical-align" target="_blank" rel="noopener">详细参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;属性是否可继承&quot;&gt;&lt;a href=&quot;#属性是否可继承&quot; class=&quot;headerlink&quot; title=&quot;属性是否可继承&quot;&gt;&lt;/a&gt;&lt;center&gt;属性是否可继承&lt;/center&gt;&lt;/h3&gt;&lt;h4 id=&quot;测试能否继承&quot;&gt;&lt;a href=&quot;#测试能否继承&quot; cl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Switch to ES6</title>
    <link href="http://www.orekiyuta.cn/archives/SwitchToES6/"/>
    <id>http://www.orekiyuta.cn/archives/SwitchToES6/</id>
    <published>2019-12-13T12:01:02.000Z</published>
    <updated>2020-01-02T15:49:39.769Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Let"><a href="#Let" class="headerlink" title="Let"></a><center>Let</center></h3><h4 id="变量i的作用域"><a href="#变量i的作用域" class="headerlink" title="变量i的作用域"></a>变量i的作用域</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">//变量i未找到</span></span><br></pre></td></tr></table></figure><h4 id="重复定义"><a href="#重复定义" class="headerlink" title="重复定义"></a>重复定义</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">let</span> value = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">let</span> value = <span class="string">"world"</span>; <span class="comment">//重复定义错误</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="const-定义常量"><a href="#const-定义常量" class="headerlink" title="const 定义常量"></a><center>const 定义常量</center></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"><span class="comment">//data = 100; //执行错误 , 不能给常量赋予新值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]; <span class="comment">//定义了list常量是数组</span></span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br><span class="line"></span><br><span class="line">list[<span class="number">0</span>] = <span class="number">100</span>;          <span class="comment">//数组内值可以变</span></span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//list = [1,2,3]; //错误 , 常量list数组不能重新赋值</span></span><br></pre></td></tr></table></figure><p>定义常量为数组时 , 常量数组内部值可以改变 , 但是常量不能重新赋值</p><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a><center>进制转换</center></h3><ul><li>0b:二进制</li><li>0o:八进制</li><li>0x:十六进制<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0b10</span>); <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0o10</span>); <span class="comment">//8</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0x10</span>); <span class="comment">//16</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0b11</span> === <span class="number">3</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0o10</span> === <span class="number">8</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0x10</span> === <span class="number">16</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">8</span>)); <span class="comment">//8进制转换</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>)); <span class="comment">//2进制转换</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>));<span class="comment">//16进制转换</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">5</span>)); <span class="comment">//5进制转换</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串解析"><a href="#字符串解析" class="headerlink" title="字符串解析"></a><center>字符串解析</center></h3><h4 id="嵌入字符串"><a href="#嵌入字符串" class="headerlink" title="嵌入字符串"></a>嵌入字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"Elias"</span></span><br><span class="line"><span class="keyword">let</span> mystr1 = <span class="string">"你好，$&#123;name&#125;!"</span></span><br><span class="line"><span class="keyword">let</span> mystr2 = <span class="string">`你好，<span class="subst">$&#123;name&#125;</span>！再见。`</span>  <span class="comment">//注意这里是反单引号</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mystr1)     <span class="comment">//你好，$&#123;name&#125;!</span></span><br><span class="line"><span class="built_in">console</span>.log(mystr2)     <span class="comment">//你好，Elias！再见。</span></span><br></pre></td></tr></table></figure><h4 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"Elias"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tagged</span>(<span class="params">formats, ...args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(formats)</span><br><span class="line">    <span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line">tagged<span class="string">`你好，<span class="subst">$&#123;name&#125;</span>！再见。`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">[ '你好，', '！再见。' ]</span></span><br><span class="line"><span class="comment">[ 'Elias' ]</span></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure><p>按 <code>${ }</code> 模板分割字符串输出形成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name1 = <span class="string">"Elias"</span></span><br><span class="line"><span class="keyword">let</span> name2 = <span class="string">"Mark"</span></span><br><span class="line"><span class="keyword">let</span> name3 = <span class="string">"Mier"</span></span><br><span class="line"><span class="keyword">let</span> name4 = <span class="string">"Tres"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tagged</span>(<span class="params">formats, ...args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(formats)</span><br><span class="line">    <span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tagged<span class="string">`<span class="subst">$&#123;name1&#125;</span>你好，<span class="subst">$&#123;name2&#125;</span>！<span class="subst">$&#123;name3&#125;</span>再见。<span class="subst">$&#123;name4&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">[ '', '你好，', '！', '再见。', '' ]</span></span><br><span class="line"><span class="comment">[ 'Elias', 'Mark', 'Mier', 'Tres' ]</span></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure><p>当字符串模板出现在首位或末位时, 非模板数组输出空值在首位或末位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name1 = <span class="string">"Elias"</span></span><br><span class="line"><span class="keyword">let</span> name2 = <span class="string">"Mark"</span></span><br><span class="line"><span class="keyword">let</span> name3 = <span class="string">"Mier"</span></span><br><span class="line"><span class="keyword">let</span> name4 = <span class="string">"Tres"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tagged</span>(<span class="params">formats, args</span>)</span>&#123; <span class="comment">//去掉 ...扩展运算符</span></span><br><span class="line">    <span class="built_in">console</span>.log(formats)</span><br><span class="line">    <span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tagged<span class="string">`<span class="subst">$&#123;name2&#125;</span>你好，<span class="subst">$&#123;name1&#125;</span>！<span class="subst">$&#123;name3&#125;</span>再见。<span class="subst">$&#123;name4&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">[ '', '你好，', '！', '再见。', '' ]</span></span><br><span class="line"><span class="comment">Mark</span></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure><p>详细可查 👉<a href="http://es6.ruanyifeng.com/#docs/array" target="_blank" rel="noopener">ECMAScript</a></p><h4 id="模板和表示形式"><a href="#模板和表示形式" class="headerlink" title="模板和表示形式"></a>模板和表示形式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"Elias"</span></span><br><span class="line"><span class="keyword">let</span> address = <span class="string">"网吧"</span></span><br><span class="line"><span class="keyword">let</span> fmtstr = markdown<span class="string">`你好，<span class="subst">$&#123;name&#125;</span>！</span></span><br><span class="line"><span class="string">晚上一起去<span class="subst">$&#123;address&#125;</span>玩吗？</span></span><br><span class="line"><span class="string">等你的回信。`</span></span><br><span class="line"><span class="built_in">console</span>.log(fmtstr)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">markdown</span>(<span class="params">formats, ...args</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(formats)</span><br><span class="line">  <span class="built_in">console</span>.log(args)</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">"# 信息标题\n"</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; formats.length; i++)</span><br><span class="line"><span class="comment">//   console.log(args[i] || '')</span></span><br><span class="line">    result += formats[i] + <span class="string">"**"</span> + (args[i] || <span class="string">''</span>) + <span class="string">"**"</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">[ '你好，', '！\n晚上一起去', '玩吗？\n等你的回信。' ]</span></span><br><span class="line"><span class="comment">[ 'Elias', '网吧' ]</span></span><br><span class="line"><span class="comment"># 信息标题</span></span><br><span class="line"><span class="comment">你好，**Elias**！</span></span><br><span class="line"><span class="comment">晚上一起去**网吧**玩吗？</span></span><br><span class="line"><span class="comment">等你的回信。****</span></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure><p>把模板和表示形式分离</p><h3 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a><center>Symbol类型</center></h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="built_in">String</span>(<span class="string">"helloWorld"</span>);</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="built_in">String</span>(<span class="string">"helloWorld"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str1 == str2);  <span class="comment">//结果：true</span></span><br><span class="line"><span class="built_in">console</span>.log(str1 === str2); <span class="comment">//结果：true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">"mySymbol"</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"mySymbol"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> s1);     <span class="comment">//结果：symbol</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.toString()); <span class="comment">//结果：Symbol(mySymbol)</span></span><br><span class="line"><span class="built_in">console</span>.log(s1 == s2);      <span class="comment">//结果：false</span></span><br><span class="line"><span class="built_in">console</span>.log(s1 === s2);     <span class="comment">//结果：false</span></span><br></pre></td></tr></table></figure><p>对于 <code>s1 == s2</code> : Symbol类型会分配一个内部哈希值 , 所以在比较的时候是用哈希值作比较 ,而不是用赋予的 value 值作比较 , 所以不相等</p><h4 id="作为常量"><a href="#作为常量" class="headerlink" title="作为常量"></a>作为常量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Java = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> Ruby = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> Perl = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> Php  = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> VB   = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lang = Php;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (lang === Java) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Java的未来在哪里？'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (lang === Ruby) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'再学个Ruby on Rails吧。'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (lang === Php) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'再学个Ruby on Rails吧。'</span>); <span class="comment">//输出这个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以直接根据常量名判断了</p><h4 id="作为属性"><a href="#作为属性" class="headerlink" title="作为属性"></a>作为属性</h4><p>首先理解下面这个<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>(<span class="string">"mySymbol"</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">String</span>(<span class="string">"mySymbol"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj[s1] = <span class="string">"hello"</span>;</span><br><span class="line">obj[s2] = <span class="string">"world"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj[s1]);</span><br><span class="line"><span class="built_in">console</span>.log(obj[s2]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">&#123; mySymbol: 'world' &#125;</span></span><br><span class="line"><span class="comment">world</span></span><br><span class="line"><span class="comment">world</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><ul><li>首先 s1 、s2 的值都为 mySymbol</li><li>然后给对象 obj 的 s1 键（mySymbol）赋 hello 值 </li><li>然后给对象 obj 的 s2 键（mySymbol）赋 world 值 , 由于是同一个键就把上面的覆盖了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">"mySymbol"</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"mySymbol"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj[s1] = <span class="string">"hello"</span>;</span><br><span class="line">obj[s2] = <span class="string">"world"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj[s1]);</span><br><span class="line"><span class="built_in">console</span>.log(obj[s2]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">&#123; [Symbol(mySymbol)]: 'hello', [Symbol(mySymbol)]: 'world' &#125;</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">world</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>接着这里就好理解了</p><h4 id="半隐藏属性"><a href="#半隐藏属性" class="headerlink" title="半隐藏属性"></a>半隐藏属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MYKEY = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(key,name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>[MYKEY] = key;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    checkKEY(key)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[MYKEY] === key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="number">123</span>, <span class="string">'Curry'</span>, <span class="number">29</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user.name, user.age, user[MYKEY]); <span class="comment">//Curry 29 123</span></span><br><span class="line"><span class="built_in">console</span>.log(user.checkKEY(<span class="number">123</span>));   <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(user.checkKEY(<span class="number">456</span>));   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(user));    <span class="comment">//[ 'name', 'age' ]    这里用Object.key列出user对象的所有属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(user)); <span class="comment">//&#123;"name":"Curry","age":29&#125;   用JSON字符串化</span></span><br></pre></td></tr></table></figure><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a><center>解构赋值</center></h3><h4 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c); <span class="comment">//10 20 30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...other] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(x, y, other); <span class="comment">//1 2 [ 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h4 id="对象赋值"><a href="#对象赋值" class="headerlink" title="对象赋值"></a>对象赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;name, age&#125; = &#123; <span class="attr">age</span>: <span class="number">20</span> , <span class="attr">name</span>: <span class="string">'Elias'</span>&#125;; </span><br><span class="line"><span class="built_in">console</span>.log(name, age); <span class="comment">//Elias 20</span></span><br></pre></td></tr></table></figure><h4 id="函数赋值"><a href="#函数赋值" class="headerlink" title="函数赋值"></a>函数赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [num1, num2] = func1();</span><br><span class="line"><span class="built_in">console</span>.log(num1, num2); <span class="comment">//10 20</span></span><br></pre></td></tr></table></figure><h4 id="函数参数名指定"><a href="#函数参数名指定" class="headerlink" title="函数参数名指定"></a>函数参数名指定</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">&#123;x=<span class="number">1</span>, y=<span class="number">2</span>&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(func2(&#123;&#125;));           <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(func2(&#123;<span class="attr">x</span>:<span class="number">10</span>&#125;));       <span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(func2(&#123;<span class="attr">y</span>:<span class="number">10</span>&#125;));       <span class="comment">//11</span></span><br><span class="line"><span class="built_in">console</span>.log(func2(&#123;<span class="attr">x</span>:<span class="number">10</span>, <span class="attr">y</span>:<span class="number">20</span>&#125;)); <span class="comment">//30</span></span><br></pre></td></tr></table></figure><h3 id="数组循环-for…of"><a href="#数组循环-for…of" class="headerlink" title="数组循环 for…of"></a><center>数组循环 for…of</center></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.Len = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> list)</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">in</span> list)</span><br><span class="line">    <span class="built_in">console</span>.log(val, list[val]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">0 10</span></span><br><span class="line"><span class="comment">1 20</span></span><br><span class="line"><span class="comment">2 30</span></span><br><span class="line"><span class="comment">Len function()&#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>for…of 只关心 list 内的值</li><li>for…in 关心 lis t所有的属性,可根据 <code>Array.prototype.Len = function(){}</code> 得出结论</li><li>前者把 list 当作数组 , 后者把 list 当作变量</li></ul><h3 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a><center>函数默认值</center></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayhello</span>(<span class="params">name = <span class="string">"Curry"</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">sayhello(); <span class="comment">//Hello Curry</span></span><br><span class="line">sayhello(<span class="string">"Elias"</span>); <span class="comment">//Hello Elias</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数值计算</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a=<span class="number">1</span>, b=a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add());  <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>));  <span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>, <span class="number">20</span>));  <span class="comment">//30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//必须指定参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">required</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"参数未制定"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayBye</span>(<span class="params">name=required(</span>))</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span> bye!`</span>);</span><br><span class="line">&#125;</span><br><span class="line">sayBye(<span class="string">'Elias'</span>);  </span><br><span class="line">sayBye();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Elias bye!</span></span><br><span class="line"><span class="comment">C:\Users\OrekiYuta\Desktop\test.js:18</span></span><br><span class="line"><span class="comment">    throw new Error("参数未制定");</span></span><br><span class="line"><span class="comment">    ^</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Error: 参数未制定</span></span><br><span class="line"><span class="comment">    at requir1ed (C:\Users\OrekiYuta\Desktop\test.js:18:11)</span></span><br><span class="line"><span class="comment">    at sayBye (C:\Users\OrekiYuta\Desktop\test.js:20:22)</span></span><br><span class="line"><span class="comment">    at Object.&lt;anonymous&gt; (C:\Users\OrekiYuta\Desktop\test.js:24:1)</span></span><br><span class="line"><span class="comment">    at Module._compile (internal/modules/cjs/loader.js:776:30)</span></span><br><span class="line"><span class="comment">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)</span></span><br><span class="line"><span class="comment">    at Module.load (internal/modules/cjs/loader.js:653:32)</span></span><br><span class="line"><span class="comment">    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)</span></span><br><span class="line"><span class="comment">    at Function.Module._load (internal/modules/cjs/loader.js:585:3)</span></span><br><span class="line"><span class="comment">    at Function.Module.runMain (internal/modules/cjs/loader.js:829:12)</span></span><br><span class="line"><span class="comment">    at startup (internal/bootstrap/node.js:283:19)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a><center>可变长参数</center></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    args.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        result += val;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));  <span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>));  <span class="comment">//55</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">args.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        result += val;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line">args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        result += val;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="箭头函数-gt"><a href="#箭头函数-gt" class="headerlink" title=" 箭头函数 =&gt; "></a><center> 箭头函数 =&gt; </center></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">let</span> newlist = list.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>)</span>&#123; <span class="comment">//value 数组值 , index //索引下标</span></span><br><span class="line">    <span class="keyword">return</span> value * value;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newlist);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="comment">//(1)</span></span><br><span class="line">newlist = list.map(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value * value;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newlist);</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)</span></span><br><span class="line">newlist = list.map(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value * value;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newlist);</span><br></pre></td></tr></table></figure><p>let 写不写都可以</p><h3 id="基本对象定义"><a href="#基本对象定义" class="headerlink" title="基本对象定义"></a><center>基本对象定义</center></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title = <span class="string">"ES6从入门到外出"</span>;</span><br><span class="line"><span class="keyword">let</span> price = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">let</span> publish = <span class="string">"Elias出版社"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line">    title, price, publish,</span><br><span class="line">    toString()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`&lt;&lt;<span class="subst">$&#123;<span class="keyword">this</span>.title&#125;</span>&gt;&gt; is <span class="subst">$&#123;price&#125;</span>元。`</span>); <span class="comment">//this 加不加都可以</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">book[<span class="string">'lang'</span>] = <span class="string">"简体中文"</span>; <span class="comment">//给book对象添加了成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123; title: 'ES6从入门到外出',</span></span><br><span class="line"><span class="comment">  price: 25,</span></span><br><span class="line"><span class="comment">  publish: 'Elias出版社',</span></span><br><span class="line"><span class="comment">  toString: [Function: toString],</span></span><br><span class="line"><span class="comment">  lang: '简体中文' &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">book.toString();</span><br><span class="line"><span class="comment">//&lt;&lt;ES6从入门到外出&gt;&gt; is 25元。</span></span><br></pre></td></tr></table></figure><h3 id="类定义-class"><a href="#类定义-class" class="headerlink" title="类定义 class"></a><center>类定义 class</center></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="comment">//关键字 constructor 构造器</span></span><br><span class="line">    <span class="keyword">constructor</span>(name, sex) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="comment">//这里隐式定义了变量 name , sex</span></span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    show()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>的性别是<span class="subst">$&#123;<span class="keyword">this</span>.sex&#125;</span>。`</span>); <span class="comment">//这里必须 this , 否则找不到该变量</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">static</span> info()&#123;  <span class="comment">//static 方法 , 不用实例化就可以引用</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这是一个球员类，您可以使用它建立自己的球员。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Curryplayer = <span class="keyword">new</span> Player(<span class="string">"库里"</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Curryplayer.name, Curryplayer.sex); <span class="comment">//库里 男</span></span><br><span class="line">Curryplayer.show();<span class="comment">//库里的性别是男。</span></span><br><span class="line">Player.info();<span class="comment">//这是一个球员类，您可以使用它建立自己的球员。</span></span><br></pre></td></tr></table></figure><h3 id="getting-setting-定义"><a href="#getting-setting-定义" class="headerlink" title="getting / setting 定义"></a><center>getting / setting 定义</center></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, sex) &#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> age()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> age(val)&#123;</span><br><span class="line">        <span class="keyword">this</span>.Age = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Curryplayer = <span class="keyword">new</span> Player(<span class="string">"库里"</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Curryplayer);</span><br><span class="line">Curryplayer.Age = <span class="number">28</span>;  <span class="comment">//设置值,调用了set</span></span><br><span class="line"><span class="built_in">console</span>.log(Curryplayer);</span><br><span class="line"><span class="built_in">console</span>.log(Curryplayer.Age); <span class="comment">//取值,调用了get</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Player &#123; name: '库里', sex: '男' &#125;</span></span><br><span class="line"><span class="comment">Player &#123; name: '库里', sex: '男', Age: 28 &#125;</span></span><br><span class="line"><span class="comment">28</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a><center>类继承</center></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(brand)&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line">    show()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`本台车的品牌是<span class="subst">$&#123;<span class="keyword">this</span>.brand&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lexus</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(brand, lineup) &#123;</span><br><span class="line">        <span class="keyword">super</span>(brand); <span class="comment">//调用父类构造器 , 初始化brand属性</span></span><br><span class="line">        <span class="keyword">this</span>.lineup = lineup;</span><br><span class="line">    &#125;</span><br><span class="line">    getPrice()&#123;</span><br><span class="line">        <span class="keyword">switch</span>(<span class="keyword">this</span>.lineup)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"RX"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"NX"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">40</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"未知车类别"</span>);  <span class="comment">//抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mycar = <span class="keyword">new</span> Lexus(<span class="string">"Lexus"</span>, <span class="string">"RX"</span>);</span><br><span class="line">mycar.show();  <span class="comment">//调用父类方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"价格是："</span>, mycar.getPrice(), <span class="string">"万"</span>); <span class="comment">//调用自己的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本台车的品牌是Lexus</span></span><br><span class="line"><span class="comment">价格是： 60 万</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="循环对象"><a href="#循环对象" class="headerlink" title="循环对象"></a><center>循环对象</center></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list  = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">let</span> mystr = <span class="string">'你好啊'</span>;</span><br><span class="line"><span class="keyword">let</span> mymap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">mymap.set(<span class="string">'JS'</span>, <span class="string">'Javascript'</span>);</span><br><span class="line">mymap.set(<span class="string">'PL'</span>, <span class="string">'Perl'</span>);</span><br><span class="line">mymap.set(<span class="string">'PY'</span>, <span class="string">'Python'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> list)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">30 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> mystr)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">你</span></span><br><span class="line"><span class="comment">好</span></span><br><span class="line"><span class="comment">啊</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> mymap)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">JS Javascript</span></span><br><span class="line"><span class="comment">PL Perl</span></span><br><span class="line"><span class="comment">PY Python</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> it = mymap.values();  <span class="comment">//it 迭代器</span></span><br><span class="line"><span class="keyword">let</span> tmp;    </span><br><span class="line"><span class="keyword">while</span>(tmp = it.next())&#123;   <span class="comment">//next() : 取mymap对象下一个值 , 如果有下一个值就取出 , 没有就退出</span></span><br><span class="line">    <span class="keyword">if</span> (tmp.done) <span class="keyword">break</span>;   <span class="comment">// done : 表明是否最后一个 , false:还有下一个值继续执行 , true , 遍历完成</span></span><br><span class="line">    <span class="built_in">console</span>.log(tmp.done)</span><br><span class="line">    <span class="built_in">console</span>.log(tmp.value);</span><br><span class="line">    <span class="built_in">console</span>.log(tmp)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tmp)</span><br><span class="line"><span class="built_in">console</span>.log(tmp.done)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">Javascript</span></span><br><span class="line"><span class="comment">&#123; value: 'Javascript', done: false &#125;</span></span><br><span class="line"><span class="comment">----------</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">Perl</span></span><br><span class="line"><span class="comment">&#123; value: 'Perl', done: false &#125;</span></span><br><span class="line"><span class="comment">----------</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">Python</span></span><br><span class="line"><span class="comment">&#123; value: 'Python', done: false &#125;</span></span><br><span class="line"><span class="comment">----------</span></span><br><span class="line"><span class="comment">&#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment">true </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="实现可迭代对象"><a href="#实现可迭代对象" class="headerlink" title="实现可迭代对象"></a><center>实现可迭代对象</center></h3><p>普通的数组内的值可以用 for..of 循环出来 , 因为是在数组内部实现了迭代器 , 因为这些在底层就已经定义好了的。平时使用起来没感觉到而已。</p><p>但是我们自己定义的对象是没有这种功能的,平常实例化的时候多数只是传递一个参数,但是当我们给对象传递了一个数组的时候呢,如何取去操作多个对象呢。</p><p>这里就需要在我们自己定义的类里面去实现迭代器接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(list)&#123;</span><br><span class="line"><span class="keyword">this</span>.list = list;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="built_in">Symbol</span>.iterator]()&#123;   <span class="comment">//[Symbol.iterator]()&#123;&#125;</span></span><br><span class="line"><span class="keyword">let</span> current = <span class="number">0</span>;    <span class="comment">//索引</span></span><br><span class="line"><span class="keyword">let</span> that = <span class="keyword">this</span>;     <span class="comment">//this 在不同作用域的里代表的内容不一样 ; this在这里是指整个类对象;所以这个过程是把整个Player对象赋给that</span></span><br><span class="line"><span class="keyword">return</span> &#123;             <span class="comment">//因为在后面this的内容会发现变化,所以先把this转移到that中</span></span><br><span class="line">next()&#123;         <span class="comment">//接口里的一个方法,这里是实现next接口</span></span><br><span class="line">                <span class="keyword">return</span> current &lt; that.list.length ? &#123;<span class="attr">value</span>:that.list[current++], <span class="attr">done</span>:<span class="literal">false</span>&#125; : &#123;<span class="attr">done</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">                <span class="comment">//当前索引小于传进来的数组的长度就把当前这个值赋给value</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> player = <span class="keyword">new</span> Player([<span class="string">'Curry'</span>, <span class="string">'Harden'</span>, <span class="string">'LeBron'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(player)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> tmp <span class="keyword">of</span> player)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Player &#123; list: [ 'Curry', 'Harden', 'LeBron' ] &#125;</span></span><br><span class="line"><span class="comment">Curry</span></span><br><span class="line"><span class="comment">Harden</span></span><br><span class="line"><span class="comment">LeBron</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>因为在Player类里面实现了迭代器接口,所以我们才能用 for…of 遍历</p><p><code>Player { list: [ &#39;Curry&#39;, &#39;Harden&#39;, &#39;LeBron&#39; ] }</code> Player 对象里是个键值对<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改一下构造器,观察结果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(AAA)&#123;</span><br><span class="line"><span class="keyword">this</span>.BBBlist = AAA;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="built_in">Symbol</span>.iterator]()&#123;   </span><br><span class="line"><span class="keyword">let</span> current = <span class="number">0</span>;    </span><br><span class="line"><span class="keyword">let</span> that = <span class="keyword">this</span>;    </span><br><span class="line"><span class="keyword">return</span> &#123;            </span><br><span class="line">next()&#123;         </span><br><span class="line">                <span class="keyword">return</span> current &lt; that.BBBlist.length ? &#123;<span class="attr">value</span>:that.BBBlist[current++], <span class="attr">done</span>:<span class="literal">false</span>&#125; : &#123;<span class="attr">done</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Player &#123; BBBlist: [ 'Curry', 'Harden', 'LeBron' ] &#125;</span></span><br><span class="line"><span class="comment">Curry</span></span><br><span class="line"><span class="comment">Harden</span></span><br><span class="line"><span class="comment">LeBron</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改参数,观察结果</span></span><br><span class="line"><span class="keyword">let</span> player = <span class="keyword">new</span> Player(<span class="string">'Curry'</span>);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Player &#123; BBBlist: 'Curry' &#125;</span></span><br><span class="line"><span class="comment">C</span></span><br><span class="line"><span class="comment">u</span></span><br><span class="line"><span class="comment">r</span></span><br><span class="line"><span class="comment">r</span></span><br><span class="line"><span class="comment">y</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> player = <span class="keyword">new</span> Player();</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Player &#123; BBBlist: undefined &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="简单迭代器"><a href="#简单迭代器" class="headerlink" title="简单迭代器"></a><center>简单迭代器</center></h3><ul><li>function* {  } : 迭代生成器</li><li>yield : 迭代返回</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">myGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'一'</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'条'</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'大'</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'河'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> myGenerator())&#123;  <span class="comment">//注意这里是 myGenerator() </span></span><br><span class="line"><span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">一</span></span><br><span class="line"><span class="comment">条</span></span><br><span class="line"><span class="comment">大</span></span><br><span class="line"><span class="comment">河</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里可以用在读取数据库结果集时</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">countdown</span>(<span class="params">begin</span>)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(begin &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> begin--; <span class="comment">//先返回再自减</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> tmp <span class="keyword">of</span> countdown(<span class="number">5</span>))&#123;</span><br><span class="line"><span class="built_in">console</span>.log(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>yield 就类似方法里的 return , return 一般都是只有一个 , 而 yield 能有多个 , 并且每次能返回不同的内容</p><p>👉<a href="https://zhuanlan.zhihu.com/p/36699390" target="_blank" rel="noopener">理解 ES6 Generator 函数 – yield</a></p><h3 id="实现可迭代对象-yield"><a href="#实现可迭代对象-yield" class="headerlink" title="实现可迭代对象 - yield"></a><center>实现可迭代对象 - yield</center></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(list)&#123;</span><br><span class="line"><span class="keyword">this</span>.list = list;</span><br><span class="line"><span class="keyword">this</span>[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> current = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">while</span>(current &lt; that.list.length)&#123;</span><br><span class="line"><span class="keyword">yield</span> that.list[current++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mylist = <span class="keyword">new</span> MyList([<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> mylist)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Let&quot;&gt;&lt;a href=&quot;#Let&quot; class=&quot;headerlink&quot; title=&quot;Let&quot;&gt;&lt;/a&gt;&lt;center&gt;Let&lt;/center&gt;&lt;/h3&gt;&lt;h4 id=&quot;变量i的作用域&quot;&gt;&lt;a href=&quot;#变量i的作用域&quot; class=&quot;headerlink&quot; title=&quot;变量i的作用域&quot;&gt;&lt;/a&gt;变量i的作用域&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//ES5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//ES6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i); &lt;span class=&quot;comment&quot;&gt;//变量i未找到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;重复定义&quot;&gt;&lt;a href=&quot;#重复定义&quot; class=&quot;headerlink&quot; title=&quot;重复定义&quot;&gt;&lt;/a&gt;重复定义&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; value = &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; value = &lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//重复定义错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="ECMAScript" scheme="http://www.orekiyuta.cn/tags/ECMAScript/"/>
    
      <category term="ES6" scheme="http://www.orekiyuta.cn/tags/ES6/"/>
    
  </entry>
  
</feed>
